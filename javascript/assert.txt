<b>Assert property</b> used to | assert.CallTracker 
<b>Assert method</b> used to an alias of assert.ok(). | assert(<i>value[, message]</i>) 
<b>Assert method</b> used to strict assertion mode | assert.deepEqual(<i>actual, expected[, message]</i>) 
<b>Assert method</b> used to test for deep equality between the actual and expected parameters."Deep" equality means that the enumerable "own" properties of child objectsare recursively evaluated also by the following rules. | assert.deepStrictEqual(<i>actual, expected[, message]</i>) 
<b>Assert method</b> used to expect the string input not to match the regular expression. | assert.doesNotMatch(<i>string, regexp[, message]</i>) 
<b>Assert method</b> used to await the asyncFn promise or, if asyncFn is a function, immediatelycalls the function and awaits the returned promise to complete. It will thencheck that the promise is not rejected. | assert.doesNotReject(<i>asyncFn[, error][, message]</i>) 
<b>Assert method</b> used to assert that the function fn does not throw an error. | assert.doesNotThrow(<i>fn[, error][, message]</i>) 
<b>Assert method</b> used to strict assertion mode | assert.equal(<i>actual, expected[, message]</i>) 
<b>Assert method</b> used to throw an AssertionError with the provided error message or a defaulterror message. If the message parameter is an instance of an Error thenit will be thrown instead of the AssertionError. | assert.fail(<i>[message]</i>) 
<b>Assert method</b> used to | assert.fail(<i>actual, expected[, message[, operator[, stackStartFn]]]</i>) 
<b>Assert method</b> used to throw value if value is not undefined or null. This is useful whentesting the error argument in callbacks. The stack trace contains all framesfrom the error passed to ifError() including the potential new frames forifError() itself. | assert.ifError(<i>value</i>) 
<b>Assert method</b> used to expect the string input to match the regular expression. | assert.match(<i>string, regexp[, message]</i>) 
<b>Assert method</b> used to strict assertion mode | assert.notDeepEqual(<i>actual, expected[, message]</i>) 
<b>Assert method</b> used to test for deep strict inequality. Opposite of assert.deepStrictEqual(). | assert.notDeepStrictEqual(<i>actual, expected[, message]</i>) 
<b>Assert method</b> used to strict assertion mode | assert.notEqual(<i>actual, expected[, message]</i>) 
<b>Assert method</b> used to test strict inequality between the actual and expected parameters asdetermined by Object.is(). | assert.notStrictEqual(<i>actual, expected[, message]</i>) 
<b>Assert method</b> used to test if value is truthy. It is equivalent toassert.equal(!!value, true, message). | assert.ok(<i>value[, message]</i>) 
<b>Assert method</b> used to await the asyncFn promise or, if asyncFn is a function, immediatelycalls the function and awaits the returned promise to complete. It will thencheck that the promise is rejected. | assert.rejects(<i>asyncFn[, error][, message]</i>) 
<b>Assert method</b> used to test strict equality between the actual and expected parameters asdetermined by Object.is(). | assert.strictEqual(<i>actual, expected[, message]</i>) 
<b>Assert method</b> used to expect the function fn to throw an error. | assert.throws(<i>fn[, error][, message]</i>) 
