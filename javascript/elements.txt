element.accesskey	<b>Element property / method</b> that sets or returns the accesskey attribute of an element.			"document.getElementById(""myAnchor"").accessKey = ""w"";"		
element.addEventListener(<em>event</em>, <em>function</em>, <em>useCapture</em>)	<b>Element property / method</b> that attaches an event handler to an element.		<em>element</em>.addEventListener(<em>event</em>, <em>function</em>, <em>useCapture</em>)	"element.addEventListener(""click"", myFunction);<br/><br/>function myFunction() {<br/>  document.getElementById(""demo"").innerHTML = ""Hello World"";<br/>  }<br/>"		
element.appendchild()	<b>Element property / method</b> that adds (appends) a new child node to an element.			"const node = document.createElement(""li"");<br/> const textnode = document.createTextNode(""Water"");<br/> node.appendChild(textnode);<br/> document.getElementById(""myList"").appendChild(node);"		
node.attributes	"<b>Element property</b>&nbsp;that returns a namednodemap of an element's attributes."					
element.<em>HTMLElementObject</em>.blur()	<b>Element property / method</b> that removes focus from an element.		<em>HTMLElementObject</em>.blur()	"document.getElementById(""myText"").blur();"		
element.childElementCount	"<b>Element property / method</b> that returns an elements's number of child elements."		<em>element</em>.childElementCount	"let numb = document.getElementById(""myDIV"").childElementCount;"		
element.childNodes	"<b>Element property / method</b> that returns a nodelist of an element's child nodes."		<em>element</em>.childNodes	const nodeList = document.body.childNodes;		
element.children	"<b>Element property / method</b> that returns an htmlcollection of an element's child elements."		<em>element</em>.children	const collection = document.body.children;		
element.classList	<b>Element property / method</b> that returns the class name(s) of an element.		<em>element</em>.classList	"const list = element.classList;<br/> list.add(""myStyle"");"		
element.classname	<b>Element property / method</b> that sets or returns the value of the class attribute of an element.			"element.className = ""myStyle"";"		
element.click()	<b>Element property / method</b> that simulates a mouse-click on an element.		<em>element</em>.click()	"&lt;input type=""checkbox"" id=""myCheck"" onmouseover=""myFunction()"";<br/><br/> &lt;script&gt;<br/> function myFunction() {<br/>  document.getElementById(""myCheck"").click();<br/> } <br/> &lt;/script&gt;"		
element.clientHeight	<b>Element property / method</b> that returns the height of an element, including padding.		<em>element</em>.clientHeight	"const element = document.getElementById(""myDIV"");<br/> let text = ""clientHeight: "" + element.clientHeight + ""px&lt;br&gt;"";<br/> text += ""clientWidth: "" + element.clientWidth + ""px"";"		
element.clientLeft	<b>Element property / method</b> that returns the width of the left border of an element.		<em>element</em>.clientLeft	"const elmnt = document.getElementById(""myDIV"");<br/> let text = ""Border top width: "" + elmnt.clientTop + ""px&lt;br&gt;"";<br/> text += ""Border left width: "" + elmnt.clientLeft + ""px"";"		
element.clientTop	<b>Element property / method</b> that returns the width of the top border of an element.		<em>element</em>.clientTop	"const element = document.getElementById(""myDIV"");<br/> let text = ""clientTop: "" + element.clientTop + ""px&lt;br&gt;"";<br/> text += ""clientLeft: "" + element.clientLeft + ""px"";"		
element.clientWidth	<b>Element property / method</b> that returns the width of an element, including padding.		<em>element</em>.clientWidth	"const element = document.getElementById(""myDIV"");<br/> let text = ""clientHeight: "" + element.clientHeight + ""px&lt;br&gt;"";<br/> text += ""clientWidth: "" + element.clientWidth + ""px"";"		
node.cloneNode(<i>deep</i>)	<b>Element property / method</b> that clones an element.		<i>node</i>.cloneNode(<i>deep</i>)	"const node = document.getElementById(""myList2"").lastChild;<br/> const clone = node.cloneNode(true);<br/><br/> document.getElementById(""myList1"").appendChild(clone);"		
element.closest(<i>selectors</i>)	<b>Element property / method</b> that searches the dom tree for the closest element that matches a css selector.		<i>element</i>.closest(<i>selectors</i>)	"const element = document.getElementById(""myElement"");<br/> const closest = element.closest("".container"");"		
node.compareDocumentPosition(<i>node</i>)	<b>Element property / method</b> that compares the document position of two elements.		<i>node</i>.compareDocumentPosition(<i>node</i>)	"const p1 = document.getElementById(""p1"");<br/> const p2 = document.getElementById(""p2"");<br/>  let position = p1.compareDocumentPosition(p2);"		
node.contains(<i>node</i>)	<b>Element property / method</b> that returns true if a node is a descendant of a node.		<i>node</i>.contains(<i>node</i>)	"const span = document.getElementById(""mySPAN"");<br/> let answer = document.getElementById(""myDIV"").contains(span);"		
element.contenteditable	<b>Element property / method</b> that sets or returns whether the content of an element is editable or not.			"&lt;p id=""myP"" contenteditable=""true""&gt;I am editable.&lt;/p&gt;"		
element.dir	<b>Element property / method</b> that sets or returns the value of the dir attribute of an element.			"document.getElementById(""myP"").dir = ""rtl"";"		
element.firstchild	<b>Element property / method</b> that returns the first child node of an element.			"document.getElementById(""myList"").firstChild.innerHTML;"		
element.firstElementChild	<b>Element property / method</b> that returns the first child element of an element.		<em>element</em>.firstElementChild	let text = element.firstElementChild.innerHTML;		
element.focus()	<b>Element property / method</b> that gives focus to an element.		<em>element</em>.focus()	"document.getElementById(""myAnchor"").focus();"		
element.getAttribute(<em>name</em>)	"<b>Element property / method</b> that returns the value of an element's attribute."		<i>element</i>.getAttribute(<em>name</em>)	"let text = element.getAttribute(""class"");"		
element.getAttributeNode(<em>name</em>)	<b>Element property / method</b> that returns an attribute node.		<i>element</i>.getAttributeNode(<em>name</em>)	"const element = document.getElementsByTagName(""H1"")[0];<br/> let text = element.getAttributeNode(""class"").value;"		
element.getBoundingClientRect()	<b>Element property / method</b> that returns the size of an element and its position relative to the viewport.		<em>element</em>.getBoundingClientRect()	const rect = element.getBoundingClientRect();		
element.getElementsByClassName(<em>classname</em>)	<b>Element property / method</b> that returns a collection of child elements with a given class name.		<em>element</em>.getElementsByClassName(<em>classname</em>)	"const list = document.getElementsByClassName(""example"")[0];<br/> list.getElementsByClassName(""child"")[0].innerHTML = ""Milk"";<br/>"		
element.getElementsByTagName(<em>tagname</em>)	<b>Element property / method</b> that returns a collection of child elements with a given tag name.		<em>element</em>.getElementsByTagName(<em>tagname</em>)	"const list = document.getElementsByTagName(""UL"")[0];<br/> list.getElementsByTagName(""li"")[0].innerHTML = ""Milk"";<br/>"		
element.hasAttribute(<em>name</em>)	<b>Element property / method</b> that returns true if an element has a given attribute.		<em>element</em>.hasAttribute(<em>name</em>)	"let answer = myButton.hasAttribute(""onclick"");"		
element.hasAttributes()	<b>Element property / method</b> that returns true if an element has any attributes.		<i>element</i>.hasAttributes()	let answer = document.body.hasAttributes();		
element.hasChildNodes()	<b>Element property / method</b> that returns true if an element has any child nodes.		<i>element</i>.hasChildNodes()	let answer = element.hasChildNodes();		
element.id	<b>Element property / method</b> that sets or returns the value of the id attribute of an element.			"let id = document.getElementsByTagName(""a"")[0].id;"		
element.innerhtml	<b>Element property / method</b> that sets or returns the content of an element.			"let html = document.getElementById(""myP"").innerHTML;"		
element.innertext	<b>Element property / method</b> that sets or returns the text content of a node and its descendants.			let text = element.innerText;		
element.insertadjacentelement()	<b>Element property / method</b> that inserts a new html element at a position relative to an element.			"const span = document.getElementById(""mySpan"");<br/> const h2 = document.getElementById(""myH2"");<br/> h2.insertAdjacentElement(""afterend"", span);"		
element.insertadjacenthtml()	<b>Element property / method</b> that inserts an html formatted text at a position relative to an element.			"const h2 = document.getElementById(""myH2"");<br/> let html = ""&lt;p&gt;My new paragraph.&lt;/p&gt;"";<br/> h2.insertAdjacentHTML(""afterend"", html);"		
element.insertadjacenttext()	<b>Element property / method</b> that inserts text into a position relative to an element.			"const h2 = document.getElementById(""myH2"");<br/> let text = ""My inserted text"";<br/> h2.insertAdjacentText(""afterend"", text);"		
element.insertBefore(<i>new, existing</i>)	<b>Element property / method</b> that inserts a new child node before an existing child node.		<i>element</i>.insertBefore(<i>new, existing</i>)	"const newNode = document.createElement(""li"");<br/> const textNode = document.createTextNode(""Water"");<br/> newNode.appendChild(textNode);<br/><br/> const list = document.getElementById(""myList"");<br/> list.insertBefore(newNode, list.children[0]);"		
element.isContentEditable	"<b>Element property / method</b> that returns true if an element's content is editable."		<em>element</em>.isContentEditable	"let answer = document.getElementById(""myP"").isContentEditable;"		
element.isdefaultnamespace()	<b>Element property / method</b> that returns true if a given namespaceuri is the default.			"let answer = element.isDefaultNamespace(""http://www.w3.org/1999/xhtml"");"		
element.isequalnode()	<b>Element property / method</b> that checks if two elements are equal.			"var item1 = document.getElementById(""myList1"").firstChild;<br/>  var item2 = document.getElementById(""myList2"").firstChild;<br/>  var x =  item1.isEqualNode(item2);"		
node.isSameNode(<i>node</i>)	<b>Element property / method</b> that checks if two elements are the same node.		<i>node</i>.isSameNode(<i>node</i>)	"var item1 = document.getElementById(""myList1"");      // An &lt;ul&gt; element with id=""myList""<br/>  var item2 = document.getElementsByTagName(""UL"")[0];  // The first &lt;ul&gt; element in the document<br/>  var x =  item1.isSameNode(item2);"		
element.lang	<b>Element property / method</b> that sets or returns the value of the lang attribute of an element.			let text = element.lang;		
element.lastchild	<b>Element property / method</b> that returns the last child node of an element.			"document.getElementById(""myList"").lastChild.innerHTML;"		
element.lastElementChild	<b>Element property / method</b> that returns the last child element of an element.		<em>element</em>.lastElementChild	"const element = document.getElementById(""myList"")<br/> let html = element.lastElementChild.innerHTML;"		
element.matches(<i>selectors</i>)	<b>Element property / method</b> that returns true if an element is matched by a given css selector.		<i>element</i>.matches(<i>selectors</i>)	"const element = document.getElementById(""demo"");<br/> let answer = element.matches("".container"");"		
element.namespaceURI	<b>Element property / method</b> that returns the namespace uri of an element.		<em>element</em>.namespaceURI	let uri = element.namespaceURI;		
element.nextsibling	<b>Element property / method</b> that returns the next node at the same node tree level.			"document.getElementById(""item1"").nextSibling.innerHTML;"		
element.nextElementSibling	<b>Element property / method</b> that returns the next element at the same node tree level.		<em>element</em>.nextElementSibling	let text = element.nextElementSibling.innerHTML;		
element.nodename	<b>Element property / method</b> that returns the name of a node.			"document.getElementById(""myP"").nodeName;"		
node.nodeType	<b>Element property / method</b> that returns the node type of a node.		node.nodeType	"var x = document.getElementById(""myP"").nodeType;"		
element.nodevalue	<b>Element property / method</b> that sets or returns the value of a node.			"document.getElementsByTagName(""BUTTON"")[0].childNodes[0].nodeValue;"		
node.normalize()	<b>Element property / method</b> that joins adjacent text nodes and removes empty text nodes in an element.		<i>node</i>.normalize()	"document.getElementById(""demo"").normalize();"		
element.offsetHeight	<b>Element property / method</b> that returns the height of an element, including padding, border and scrollbar.		<em>element</em>.offsetHeight	"const elmnt = document.getElementById(""myDIV"");<br/> let text = ""Height with padding and border: "" + elmnt.offsetHeight + ""px&lt;br&gt;"";<br/> text += ""Width with padding and border: "" + elmnt.offsetWidth + ""px"";"		
element.offsetWidth	<b>Element property / method</b> that returns the width of an element, including padding, border and scrollbar.		<em>element</em>.offsetWidth	"const elmnt = document.getElementById(""myDIV"");<br/> let text = ""Height with padding and border: "" + elmnt.offsetHeight + ""px&lt;br&gt;"";<br/> text += ""Width with padding and border: "" + elmnt.offsetWidth + ""px"";"		
element.offsetleft	<b>Element property / method</b> that returns the horizontal offset position of an element.			"const element = document.getElementById(""myDIV"");<br/> let pos = element.offsetLeft;"		
element.offsetParent	<b>Element property / method</b> that returns the offset container of an element.		<em>element</em>.offsetParent	"let node = document.getElementById(""myDIV"").offsetParent;"		
element.offsettop	<b>Element property / method</b> that returns the vertical offset position of an element.			"const element = document.getElementById(""myDIV"");<br/> let pos = element.offsetTop;"		
element.outerhtml	<b>Element property / method</b> that sets or returns the content of an element (including the start tag and the end tag).			"document.getElementsByTagName(""h2"")[0] = ""&lt;h3&gt;Changed!&lt;/h3&gt;"";"		
element.outertext	<b>Element property / method</b> that sets or returns the outer text content of a node and its descendants.			"document.getElementById(""myH1"").outerText = ""Changed content!"";"		
node.ownerDocument	<b>Element property / method</b> that returns the root element (document object) for an element.		node.ownerDocument	"var x = document.getElementById(""myP"").ownerDocument.nodeType;"		
element.parentNode	<b>Element property / method</b> that returns the parent node of an element.		<em>element</em>.parentNode	"let name = document.getElementById(""myLI"").parentNode.nodeName;"		
node.parentElement	<b>Element property / method</b> that returns the parent element node of an element.		node.parentElement	"var x = document.getElementById(""myLI"").parentElement.nodeName;"		
element.previoussibling	<b>Element property / method</b> that returns the previous node at the same node tree level.			"document.getElementById(""item2"").previousSibling.innerHTML;"		
element.previousElementSibling	<b>Element property / method</b> that returns the previous element at the same node tree level.		<em>element</em>.previousElementSibling	let text = element.previousElementSibling.innerHTML;		
element.querySelector(<em>CSS selectors</em>)	<b>Element property / method</b> that returns the first child element that matches a css selector(s).		<em>element</em>.querySelector(<em>CSS selectors</em>)	"var x = document.getElementById(""myDIV"");<br/>x.querySelector("".example"").innerHTML = ""Hello World!"";"		
element.querySelectorAll(<em>CSS selectors</em>)	<b>Element property / method</b> that returns all child elements that matches a css selector(s).		<em>element</em>.querySelectorAll(<em>CSS selectors</em>)	"// Get the element with id=""myDIV"" (a div), then get all elements inside div with class=""example""<br/>var x = document.getElementById(""myDIV"").querySelectorAll("".example"");  <br/><br/>  // Set the background color of the first element with class=""example"" (index 0) in div<br/>  x[0].style.backgroundColor = ""red"";"		
element.remove()	<b>Element property / method</b> that removes an element from the dom.			"const element = document.getElementById(""demo"");<br/> element.remove();"		
element.removeAttribute(<em>name</em>)	<b>Element property / method</b> that removes an attribute from an element.		<em>element</em>.removeAttribute(<em>name</em>)	"document.getElementsByTagName(""H1"")[0].removeAttribute(""class"");"		
element.removeAttributeNode(node)	<b>Element property / method</b> that removes an attribute node, and returns the removed node.		<em>element</em>.removeAttributeNode(node)	"const element = document.getElementsByTagName(""H1"")[0];<br/> <br/> const attr = element.getAttributeNode(""class"");<br/> element.removeAttributeNode(attr);"		
element.removechild()	<b>Element property / method</b> that removes a child node from an element.			"const list = document.getElementById(""myList"");<br/> list.removeChild(list.firstElementChild);"		
element.removeEventListener(<em>event</em>, <em>function</em>, <em>capture</em>)	<b>Element property / method</b> that removes an event handler that has been attached with the addeventlistener() method.		<em>element</em>.removeEventListener(<em>event</em>, <em>function</em>, <em>capture</em>)	"myDIV.removeEventListener(""mousemove"", myFunction);"		
node.replaceChild(<i>newnode</i>,<i> oldnode</i>)	<b>Element property / method</b> that replaces a child node in an element.		<i>node</i>.replaceChild(<i>newnode</i>,<i> oldnode</i>)	"const newNode = document.createTextNode(""Water"");<br/> const element = document.getElementById(""myList"").children[0];<br/><br/> element.replaceChild(newNode, element.childNodes[0]);<br/>"		
element.scrollHeight	<b>Element property / method</b> that returns the entire height of an element, including padding.		<em>element</em>.scrollHeight	"const element = document.getElementById(""content"");<br/> let x = element.scrollHeight;<br/> let y = element.scrollWidth;"		
element.scrollIntoView(<em>align</em>)	<b>Element property / method</b> that scrolls the an element into the visible area of the browser window.		<em>element</em>.scrollIntoView(<em>align</em>)	"const element = document.getElementById(""content"");<br/> element.scrollIntoView();"		
element.scrollleft	"<b>Element property / method</b> that sets or returns the number of pixels an element's content is scrolled horizontally."			"const element = document.getElementById(""myDIV"");<br/> let x = elmnt.scrollLeft;<br/> let y = elmnt.scrollTop;"		
element.scrolltop	"<b>Element property / method</b> that sets or returns the number of pixels an element's content is scrolled vertically."			"const element = document.getElementById(""myDIV"");<br/> let x = elmnt.scrollLeft;<br/> let y = elmnt.scrollTop;"		
element.scrollWidth	<b>Element property / method</b> that returns the entire width of an element, including padding.		<em>element</em>.scrollWidth	"const element = document.getElementById(""content"");<br/> let x = element.scrollHeight;<br/> let y = element.scrollWidth;"		
element.setAttribute(<em>name</em>, <em>value</em>)	"<b>Element property / method</b> that sets or changes an attribute's value."		<em>element</em>.setAttribute(<em>name</em>, <em>value</em>)	"element.setAttribute(""class"", ""democlass"");"		
element.setAttributeNode(node)	<b>Element property / method</b> that sets or changes an attribute node.		<em>element</em>.setAttributeNode(node)	"const attr = document.createAttribute(""class"");<br/> attr.value = ""democlass"";<br/> <br/> const h1 = document.getElementsByTagName(""H1"")[0];<br/> h1.setAttributeNode(attr);"		
element.style	<b>Element property / method</b> that sets or returns the value of the style attribute of an element.			"document.getElementById(""myH1"").style.color = ""red"";"		
element.tabindex	<b>Element property / method</b> that sets or returns the value of the tabindex attribute of an element.			"document.getElementById(""myAnchor1"").tabIndex = ""3"";<br/> document.getElementById(""myAnchor2"").tabIndex = ""2"";<br/> document.getElementById(""myAnchor3"").tabIndex = ""1"";"		
element.tagName	<b>Element property / method</b> that returns the tag name of an element.		<em>element</em>.tagName	"let name = document.getElementById(""demo"").tagName;"		
element.textcontent	<b>Element property / method</b> that sets or returns the textual content of a node and its descendants.			let text = element.textContent;		
element.title	<b>Element property / method</b> that sets or returns the value of the title attribute of an element.			let title = element.title;		