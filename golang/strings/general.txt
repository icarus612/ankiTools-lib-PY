strings.Clone(<i>s</i>) | <b>Strings function</b> that returns a fresh copy of s. It guarantees to make a copy of s into a new allocation, which can be important when retaining only a small substring of a much larger string. Using Clone can help such programs use less memory. Of course, since using Clone makes a copy, overuse of Clone can make programs use more memory. Clone should typically be used only rarely, and only when profiling indicates that it is needed. For strings of length zero the string "" will be returned and no allocation is made.  |  | func Clone(s string) string 
strings.Compare(<i>a</i>, <i>b</i>) | <b>Strings function</b> that returns an integer comparing two strings lexicographically. The result will be 0 if a == b, -1 if a < b, and +1 if a > b.  |  | func Compare(a, b string) int 
strings.Contains(<i>s</i>, <i>substr</i>) | <b>Strings function</b> that reports whether substr is within s.  |  | func Contains(s, substr string) bool 
strings.ContainsAny(<i>s</i>, <i>chars</i>) | <b>Strings function</b> that reports whether any Unicode code points in chars are within s.  |  | func ContainsAny(s, chars string) bool 
strings.ContainsRune(<i>s</i>, <i>r</i>) | <b>Strings function</b> that reports whether the Unicode code point r is within s.  |  | func ContainsRune(s string, r rune) bool 
strings.Count(<i>s</i>, <i>substr</i>) | <b>Strings function</b> that counts the number of non-overlapping instances of substr in s. If substr is an empty string, Count returns 1 + the number of Unicode code points in s.  |  | func Count(s, substr string) int 
strings.Cut(<i>s</i>, <i>sep</i>) | <b>Strings function</b> that slices s around the first instance of sep, returning the text before and after sep. The found result reports whether sep appears in s. If sep does not appear in s, cut returns s, "", false.  |  | func Cut(s, sep string) (before, after string, found bool) 
strings.CutPrefix(<i>s</i>, <i>prefix</i>) | <b>Strings function</b> that returns s without the provided leading prefix string and reports whether it found the prefix. If s doesn't start with prefix, CutPrefix returns s, false. If prefix is the empty string, CutPrefix returns s, true.  |  | func CutPrefix(s, prefix string) (after string, found bool) 
strings.CutSuffix(<i>s</i>, <i>suffix</i>) | <b>Strings function</b> that returns s without the provided ending suffix string and reports whether it found the suffix. If s doesn't end with suffix, CutSuffix returns s, false. If suffix is the empty string, CutSuffix returns s, true.  |  | func CutSuffix(s, suffix string) (before string, found bool) 
strings.EqualFold(<i>s</i>, <i>t</i>) | <b>Strings function</b> that reports whether s and t, interpreted as UTF-8 strings, are equal under simple Unicode case-folding, which is a more general form of case-insensitivity.  |  | func EqualFold(s, t string) bool 
strings.Fields(<i>s</i>) | <b>Strings function</b> that splits the string s around each instance of one or more consecutive white space characters, as defined by unicode.IsSpace, returning a slice of substrings of s or an empty slice if s contains only white space.  |  | func Fields(s string) []string 
strings.FieldsFunc(<i>s</i>, <i>f</i>) | <b>Strings function</b> that splits the string s at each run of Unicode code points c satisfying f(c) and returns an array of slices of s. If all code points in s satisfy f(c) or the string is empty, an empty slice is returned.  |  | func FieldsFunc(s string, f func(rune) bool) []string 
strings.HasPrefix(<i>s</i>, <i>prefix</i>) | <b>Strings function</b> that tests whether the string s begins with prefix.  |  | func HasPrefix(s, prefix string) bool 
strings.HasSuffix(<i>s</i>, <i>suffix</i>) | <b>Strings function</b> that tests whether the string s ends with suffix.  |  | func HasSuffix(s, suffix string) bool 
strings.Index(<i>s</i>, <i>substr</i>) | <b>Strings function</b> that returns the index of the first instance of substr in s, or -1 if substr is not present in s.  |  | func Index(s, substr string) int 
strings.IndexAny(<i>s</i>, <i>chars</i>) | <b>Strings function</b> that returns the index of the first instance of any Unicode code point from chars in s, or -1 if no Unicode code point from chars is present in s.  |  | func IndexAny(s, chars string) int 
strings.IndexByte(<i>s</i>, <i>c</i>) | <b>Strings function</b> that returns the index of the first instance of c in s, or -1 if c is not present in s.  |  | func IndexByte(s string, c byte) int 
strings.IndexFunc(<i>s</i>, <i>f</i>) | <b>Strings function</b> that returns the index into s of the first Unicode code point satisfying f(c), or -1 if none do.  |  | func IndexFunc(s string, f func(rune) bool) int 
strings.IndexRune(<i>s</i>, <i>r</i>) | <b>Strings function</b> that returns the index of the first instance of the Unicode code point r, or -1 if rune is not present in s. If r is utf8.RuneError, it returns the first instance of any invalid UTF-8 byte sequence.  |  | func IndexRune(s string, r rune) int 
strings.Join(<i>elems</i>, <i>sep</i>) | <b>Strings function</b> that concatenates the elements of its first argument to create a single string. The separator string sep is placed between elements in the resulting string.  |  | func Join(elems []string, sep string) string 
strings.LastIndex(<i>s</i>, <i>substr</i>) | <b>Strings function</b> that returns the index of the last instance of substr in s, or -1 if substr is not present in s.  |  | func LastIndex(s, substr string) int 
strings.LastIndexAny(<i>s</i>, <i>chars</i>) | <b>Strings function</b> that returns the index of the last instance of any Unicode code point from chars in s, or -1 if no Unicode code point from chars is present in s.  |  | func LastIndexAny(s, chars string) int 
strings.LastIndexByte(<i>s</i>, <i>c</i>) | <b>Strings function</b> that returns the index of the last instance of c in s, or -1 if c is not present in s.  |  | func LastIndexByte(s string, c byte) int 
strings.LastIndexFunc(<i>s</i>, <i>f</i>) | <b>Strings function</b> that returns the index into s of the last Unicode code point satisfying f(c), or -1 if none do.  |  | func LastIndexFunc(s string, f func(rune) bool) int 
strings.Map(<i>mapping</i>) | <b>Strings function</b> that returns a copy of the string s with all its characters modified according to the mapping function. If mapping returns a negative value, the character is dropped from the string with no replacement.  |  | func Map(mapping func(rune) rune, s string) string 
strings.Repeat(<i>s</i>, <i>count</i>) | <b>Strings function</b> that returns a new string consisting of count copies of the string s.  |  | func Repeat(s string, count int) string 
strings.Replace(<i>s</i>, <i>old</i>, <i>new</i>, <i>n</i>) | <b>Strings function</b> that returns a copy of the string s with the first n non-overlapping instances of old replaced by new. If old is empty, it matches at the beginning of the string and after each UTF-8 sequence, yielding up to k+1 replacements for a k-rune string. If n < 0, there is no limit on the number of replacements.  |  | func Replace(s, old, new string, n int) string 
strings.ReplaceAll(<i>s</i>, <i>old</i>, <i>new</i>) | <b>Strings function</b> that returns a copy of the string s with all non-overlapping instances of old replaced by new. If old is empty, it matches at the beginning of the string and after each UTF-8 sequence, yielding up to k+1 replacements for a k-rune string.  |  | func ReplaceAll(s, old, new string) string 
strings.Split(<i>s</i>, <i>sep</i>) | <b>Strings function</b> that slices s into all substrings separated by sep and returns a slice of the substrings between those separators.  |  | func Split(s, sep string) []string 
strings.SplitAfter(<i>s</i>, <i>sep</i>) | <b>Strings function</b> that slices s into all substrings after each instance of sep and returns a slice of those substrings.  |  | func SplitAfter(s, sep string) []string 
strings.SplitAfterN(<i>s</i>, <i>sep</i>, <i>n</i>) | <b>Strings function</b> that slices s into substrings after each instance of sep and returns a slice of those substrings.  |  | func SplitAfterN(s, sep string, n int) []string 
strings.SplitN(<i>s</i>, <i>sep</i>, <i>n</i>) | <b>Strings function</b> that slices s into substrings separated by sep and returns a slice of the substrings between those separators.  |  | func SplitN(s, sep string, n int) []string 
strings.Title(<i>s</i>) | <b>Strings function</b> that returns a copy of the string s with all Unicode letters that begin words mapped to their Unicode title case.  |  | func Title(s string) string 
strings.ToLower(<i>s</i>) | <b>Strings function</b> that returns s with all Unicode letters mapped to their lower case.  |  | func ToLower(s string) string 
strings.ToLowerSpecial(<i>c</i>, <i>s</i>) | <b>Strings function</b> that returns a copy of the string s with all Unicode letters mapped to their lower case using the case mapping specified by c.  |  | func ToLowerSpecial(c unicode.SpecialCase, s string) string 
strings.ToTitle(<i>s</i>) | <b>Strings function</b> that returns a copy of the string s with all Unicode letters mapped to their Unicode title case.  |  | func ToTitle(s string) string 
strings.ToTitleSpecial(<i>c</i>, <i>s</i>) | <b>Strings function</b> that returns a copy of the string s with all Unicode letters mapped to their Unicode title case, giving priority to the special casing rules.  |  | func ToTitleSpecial(c unicode.SpecialCase, s string) string 
strings.ToUpper(<i>s</i>) | <b>Strings function</b> that returns s with all Unicode letters mapped to their upper case.  |  | func ToUpper(s string) string 
strings.ToUpperSpecial(<i>c</i>, <i>s</i>) | <b>Strings function</b> that returns a copy of the string s with all Unicode letters mapped to their upper case using the case mapping specified by c.  |  | func ToUpperSpecial(c unicode.SpecialCase, s string) string 
strings.ToValidUTF8(<i>s</i>, <i>replacement</i>) | <b>Strings function</b> that returns a copy of the string s with each run of invalid UTF-8 byte sequences replaced by the replacement string, which may be empty.  |  | func ToValidUTF8(s, replacement string) string 
strings.Trim(<i>s</i>, <i>cutset</i>) | <b>Strings function</b> that returns a slice of the string s with all leading and trailing Unicode code points contained in cutset removed.  |  | func Trim(s, cutset string) string 
strings.TrimFunc(<i>s</i>, <i>f</i>) | <b>Strings function</b> that returns a slice of the string s with all leading and trailing Unicode code points c satisfying f(c) removed.  |  | func TrimFunc(s string, f func(rune) bool) string 
strings.TrimLeft(<i>s</i>, <i>cutset</i>) | <b>Strings function</b> that returns a slice of the string s with all leading Unicode code points contained in cutset removed.  |  | func TrimLeft(s, cutset string) string 
strings.TrimLeftFunc(<i>s</i>, <i>f</i>) | <b>Strings function</b> that returns a slice of the string s with all leading Unicode code points c satisfying f(c) removed.  |  | func TrimLeftFunc(s string, f func(rune) bool) string 
strings.TrimPrefix(<i>s</i>, <i>prefix</i>) | <b>Strings function</b> that returns s without the provided leading prefix string. If s doesn't start with prefix, s is returned unchanged.  |  | func TrimPrefix(s, prefix string) string 
strings.TrimRight(<i>s</i>, <i>cutset</i>) | <b>Strings function</b> that returns a slice of the string s, with all trailing Unicode code points contained in cutset removed.  |  | func TrimRight(s, cutset string) string 
strings.TrimRightFunc(<i>s</i>, <i>f</i>) | <b>Strings function</b> that returns a slice of the string s with all trailing Unicode code points c satisfying f(c) removed.  |  | func TrimRightFunc(s string, f func(rune) bool) string 
strings.TrimSpace(<i>s</i>) | <b>Strings function</b> that returns a slice of the string s, with all leading and trailing white space removed, as defined by Unicode.  |  | func TrimSpace(s string) string 
strings.TrimSuffix(<i>s</i>, <i>suffix</i>) | <b>Strings function</b> that returns s without the provided trailing suffix string. If s doesn't end with suffix, s is returned unchanged.  |  | func TrimSuffix(s, suffix string) string 
strings.NewReader(<i>s</i>) | <b>Strings function</b> that returns a new Reader reading from s. It is similar to bytes.NewBufferString but more efficient and read-only.  |  | func NewReader(s string) *Reader 
strings.NewReplacer(<i>oldnew</i>) | <b>Strings function</b> that returns a new Replacer from a list of old, new string pairs. Replacements are performed in the order they appear in the target string, without overlapping matches. The old string comparisons are done in argument order.  |  | func NewReplacer(oldnew ...string) *Replacer 
