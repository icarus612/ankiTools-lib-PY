fmt.Append(<i>b</i>, <i>a</i>) | <b>Fmt function</b> that formats using the default formats for its operands, appends the result to the byte slice, and returns the updated slice.  |  | func Append(b []byte, a ...any) []byte 
fmt.Appendf(<i>b</i>, <i>format</i>, <i>a</i>) | <b>Fmt function</b> that formats according to a format specifier, appends the result to the byte slice, and returns the updated slice.  |  | func Appendf(b []byte, format string, a ...any) []byte 
fmt.Appendln(<i>b</i>, <i>a</i>) | <b>Fmt function</b> that formats using the default formats for its operands, appends the result to the byte slice, and returns the updated slice. Spaces are always added between operands and a newline is appended.  |  | func Appendln(b []byte, a ...any) []byte 
fmt.Errorf(<i>format</i>, <i>a</i>) | <b>Fmt function</b> that formats according to a format specifier and returns the string as a value that satisfies error.  |  | func Errorf(format string, a ...any) error 
fmt.FormatString(<i>state</i>, <i>verb</i>) | <b>Fmt function</b> that returns a string representing the fully qualified formatting directive captured by the State, followed by the argument verb. (State does not itself contain the verb.) The result has a leading percent sign followed by any flags, the width, and the precision. Missing flags, width, and precision are omitted. This function allows a Formatter to reconstruct the original directive triggering the call to Format.  |  | func FormatString(state State, verb rune) string 
fmt.Fprint(<i>w</i>, <i>a</i>) | <b>Fmt function</b> that formats using the default formats for its operands and writes to w. Spaces are added between operands when neither is a string. It returns the number of bytes written and any write error encountered.  |  | func Fprint(w io.Writer, a ...any) (n int, err error) 
fmt.Fprintf(<i>w</i>, <i>format</i>, <i>a</i>) | <b>Fmt function</b> that formats according to a format specifier and writes to w. It returns the number of bytes written and any write error encountered.  |  | func Fprintf(w io.Writer, format string, a ...any) (n int, err error) 
fmt.Fprintln(<i>w</i>, <i>a</i>) | <b>Fmt function</b> that formats using the default formats for its operands and writes to w. Spaces are always added between operands and a newline is appended. It returns the number of bytes written and any write error encountered.  |  | func Fprintln(w io.Writer, a ...any) (n int, err error) 
fmt.Fscan(<i>r</i>, <i>a</i>) | <b>Fmt function</b> that scans text read from r, storing successive space-separated values into successive arguments. Newlines count as space. It returns the number of items successfully scanned. If that is less than the number of arguments, err will report why.  |  | func Fscan(r io.Reader, a ...any) (n int, err error) 
fmt.Fscanf(<i>r</i>, <i>format</i>, <i>a</i>) | <b>Fmt function</b> that scans text read from r, storing successive space-separated values into successive arguments as determined by the format. It returns the number of items successfully parsed. Newlines in the input must match newlines in the format.  |  | func Fscanf(r io.Reader, format string, a ...any) (n int, err error) 
fmt.Fscanln(<i>r</i>, <i>a</i>) | <b>Fmt function</b> that is similar to Fscan, but stops scanning at a newline and after the final item there must be a newline or EOF.  |  | func Fscanln(r io.Reader, a ...any) (n int, err error) 
fmt.Print(<i>a</i>) | <b>Fmt function</b> that formats using the default formats for its operands and writes to standard output. Spaces are added between operands when neither is a string. It returns the number of bytes written and any write error encountered.  |  | func Print(a ...any) (n int, err error) 
fmt.Printf(<i>format</i>, <i>a</i>) | <b>Fmt function</b> that formats according to a format specifier and writes to standard output. It returns the number of bytes written and any write error encountered.  |  | func Printf(format string, a ...any) (n int, err error) 
fmt.Println(<i>a</i>) | <b>Fmt function</b> that formats using the default formats for its operands and writes to standard output. Spaces are always added between operands and a newline is appended. It returns the number of bytes written and any write error encountered.  |  | func Println(a ...any) (n int, err error) 
fmt.Scan(<i>a</i>) | <b>Fmt function</b> that scans text read from standard input, storing successive space-separated values into successive arguments. Newlines count as space. It returns the number of items successfully scanned. If that is less than the number of arguments, err will report why.  |  | func Scan(a ...any) (n int, err error) 
fmt.Scanf(<i>format</i>, <i>a</i>) | <b>Fmt function</b> that scans text read from standard input, storing successive space-separated values into successive arguments as determined by the format. It returns the number of items successfully scanned. If that is less than the number of arguments, err will report why. Newlines in the input must match newlines in the format. The one exception: the verb %c always scans the next rune in the input, even if it is a space (or tab etc.) or newline.  |  | func Scanf(format string, a ...any) (n int, err error) 
fmt.Scanln(<i>a</i>) | <b>Fmt function</b> that is similar to Scan, but stops scanning at a newline and after the final item there must be a newline or EOF.  |  | func Scanln(a ...any) (n int, err error) 
fmt.Sprint(<i>a</i>) | <b>Fmt function</b> that formats using the default formats for its operands and returns the resulting string. Spaces are added between operands when neither is a string.  |  | func Sprint(a ...any) string 
fmt.Sprintf(<i>format</i>, <i>a</i>) | <b>Fmt function</b> that formats according to a format specifier and returns the resulting string.  |  | func Sprintf(format string, a ...any) string 
fmt.Sprintln(<i>a</i>) | <b>Fmt function</b> that formats using the default formats for its operands and returns the resulting string. Spaces are always added between operands and a newline is appended.  |  | func Sprintln(a ...any) string 
fmt.Sscan(<i>str</i>, <i>a</i>) | <b>Fmt function</b> that scans the argument string, storing successive space-separated values into successive arguments. Newlines count as space. It returns the number of items successfully scanned. If that is less than the number of arguments, err will report why.  |  | func Sscan(str string, a ...any) (n int, err error) 
fmt.Sscanf(<i>str</i>, <i>format</i>, <i>a</i>) | <b>Fmt function</b> that scans the argument string, storing successive space-separated values into successive arguments as determined by the format. It returns the number of items successfully parsed. Newlines in the input must match newlines in the format.  |  | func Sscanf(str string, format string, a ...any) (n int, err error) 
fmt.Sscanln(<i>str</i>, <i>a</i>) | <b>Fmt function</b> that is similar to Sscan, but stops scanning at a newline and after the final item there must be a newline or EOF.  |  | func Sscanln(str string, a ...any) (n int, err error) 
