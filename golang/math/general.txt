math.Abs(<i>x</i>) | <b>Math function</b> that returns the absolute value of x.  |  | func Abs(x float64) float64 
math.Acos(<i>x</i>) | <b>Math function</b> that returns the arccosine, in radians, of x.  |  | func Acos(x float64) float64 
math.Acosh(<i>x</i>) | <b>Math function</b> that returns the inverse hyperbolic cosine of x.  |  | func Acosh(x float64) float64 
math.Asin(<i>x</i>) | <b>Math function</b> that returns the arcsine, in radians, of x.  |  | func Asin(x float64) float64 
math.Asinh(<i>x</i>) | <b>Math function</b> that returns the inverse hyperbolic sine of x.  |  | func Asinh(x float64) float64 
math.Atan(<i>x</i>) | <b>Math function</b> that returns the arctangent, in radians, of x.  |  | func Atan(x float64) float64 
math.Atan2(<i>y</i>, <i>x</i>) | <b>Math function</b> that returns the arc tangent of y/x, using the signs of the two to determine the quadrant of the return value.  |  | func Atan2(y, x float64) float64 
math.Atanh(<i>x</i>) | <b>Math function</b> that returns the inverse hyperbolic tangent of x.  |  | func Atanh(x float64) float64 
math.Cbrt(<i>x</i>) | <b>Math function</b> that returns the cube root of x.  |  | func Cbrt(x float64) float64 
math.Ceil(<i>x</i>) | <b>Math function</b> that returns the least integer value greater than or equal to x.  |  | func Ceil(x float64) float64 
math.Copysign(<i>f</i>, <i>sign</i>) | <b>Math function</b> that returns a value with the magnitude of f and the sign of sign.  |  | func Copysign(f, sign float64) float64 
math.Cos(<i>x</i>) | <b>Math function</b> that returns the cosine of the radian argument x.  |  | func Cos(x float64) float64 
math.Cosh(<i>x</i>) | <b>Math function</b> that returns the hyperbolic cosine of x.  |  | func Cosh(x float64) float64 
math.Dim(<i>x</i>, <i>y</i>) | <b>Math function</b> that returns the maximum of x-y or 0.  |  | func Dim(x, y float64) float64 
math.Erf(<i>x</i>) | <b>Math function</b> that returns the error function of x.  |  | func Erf(x float64) float64 
math.Erfc(<i>x</i>) | <b>Math function</b> that returns the complementary error function of x.  |  | func Erfc(x float64) float64 
math.Erfcinv(<i>x</i>) | <b>Math function</b> that returns the inverse of Erfc(x).  |  | func Erfcinv(x float64) float64 
math.Erfinv(<i>x</i>) | <b>Math function</b> that returns the inverse error function of x.  |  | func Erfinv(x float64) float64 
math.Exp(<i>x</i>) | <b>Math function</b> that returns e**x, the base-e exponential of x.  |  | func Exp(x float64) float64 
math.Exp2(<i>x</i>) | <b>Math function</b> that returns 2**x, the base-2 exponential of x.  |  | func Exp2(x float64) float64 
math.Expm1(<i>x</i>) | <b>Math function</b> that returns e**x - 1, the base-e exponential of x minus 1. It is more accurate than Exp(x) - 1 when x is near zero.  |  | func Expm1(x float64) float64 
math.FMA(<i>x</i>, <i>y</i>, <i>z</i>) | <b>Math function</b> that returns x * y + z, computed with only one rounding. (That is, FMA returns the fused multiply-add of x, y, and z.)  |  | func FMA(x, y, z float64) float64 
math.Float32bits(<i>f</i>) | <b>Math function</b> that returns the IEEE 754 binary representation of f, with the sign bit of f and the result in the same bit position. Float32bits(Float32frombits(x)) == x.  |  | func Float32bits(f float32) uint32 
math.Float32frombits(<i>b</i>) | <b>Math function</b> that returns the floating-point number corresponding to the IEEE 754 binary representation b, with the sign bit of b and the result in the same bit position. Float32frombits(Float32bits(x)) == x.  |  | func Float32frombits(b uint32) float32 
math.Float64bits(<i>f</i>) | <b>Math function</b> that returns the IEEE 754 binary representation of f, with the sign bit of f and the result in the same bit position, and Float64bits(Float64frombits(x)) == x.  |  | func Float64bits(f float64) uint64 
math.Float64frombits(<i>b</i>) | <b>Math function</b> that returns the floating-point number corresponding to the IEEE 754 binary representation b, with the sign bit of b and the result in the same bit position. Float64frombits(Float64bits(x)) == x.  |  | func Float64frombits(b uint64) float64 
math.Floor(<i>x</i>) | <b>Math function</b> that returns the greatest integer value less than or equal to x.  |  | func Floor(x float64) float64 
math.Frexp(<i>f</i>) | <b>Math function</b> that breaks f into a normalized fraction and an integral power of two. It returns frac and exp satisfying f == frac × 2**exp, with the absolute value of frac in the interval [½, 1).  |  | func Frexp(f float64) (frac float64, exp int) 
math.Gamma(<i>x</i>) | <b>Math function</b> that returns the Gamma function of x.  |  | func Gamma(x float64) float64 
math.Hypot(<i>p</i>, <i>q</i>) | <b>Math function</b> that returns Sqrt(p*p + q*q), taking care to avoid unnecessary overflow and underflow.  |  | func Hypot(p, q float64) float64 
math.Ilogb(<i>x</i>) | <b>Math function</b> that returns the binary exponent of x as an integer.  |  | func Ilogb(x float64) int 
math.Inf(<i>sign</i>) | <b>Math function</b> that returns positive infinity if sign >= 0, negative infinity if sign < 0.  |  | func Inf(sign int) float64 
math.IsInf(<i>f</i>, <i>sign</i>) | <b>Math function</b> that reports whether f is an infinity, according to sign. If sign > 0, IsInf reports whether f is positive infinity. If sign < 0, IsInf reports whether f is negative infinity. If sign == 0, IsInf reports whether f is either infinity.  |  | func IsInf(f float64, sign int) bool 
math.IsNaN(<i>f</i>) | <b>Math function</b> that reports whether f is an IEEE 754 “not-a-number” value.  |  | func IsNaN(f float64) (is bool) 
math.J0(<i>x</i>) | <b>Math function</b> that returns the order-zero Bessel function of the first kind.  |  | func J0(x float64) float64 
math.J1(<i>x</i>) | <b>Math function</b> that returns the order-one Bessel function of the first kind.  |  | func J1(x float64) float64 
math.Jn(<i>n</i>, <i>x</i>) | <b>Math function</b> that returns the order-n Bessel function of the first kind.  |  | func Jn(n int, x float64) float64 
math.Ldexp(<i>frac</i>, <i>exp</i>) | <b>Math function</b> that is the inverse of Frexp. It returns frac × 2**exp.  |  | func Ldexp(frac float64, exp int) float64 
math.Lgamma(<i>x</i>) | <b>Math function</b> that returns the natural logarithm and sign (-1 or +1) of Gamma(x).  |  | func Lgamma(x float64) (lgamma float64, sign int) 
math.Log(<i>x</i>) | <b>Math function</b> that returns the natural logarithm of x.  |  | func Log(x float64) float64 
math.Log10(<i>x</i>) | <b>Math function</b> that returns the decimal logarithm of x. The special cases are the same as for Log.  |  | func Log10(x float64) float64 
math.Log1p(<i>x</i>) | <b>Math function</b> that returns the natural logarithm of 1 plus its argument x. It is more accurate than Log(1 + x) when x is near zero.  |  | func Log1p(x float64) float64 
math.Log2(<i>x</i>) | <b>Math function</b> that returns the binary logarithm of x. The special cases are the same as for Log.  |  | func Log2(x float64) float64 
math.Logb(<i>x</i>) | <b>Math function</b> that returns the binary exponent of x.  |  | func Logb(x float64) float64 
math.Max(<i>x</i>, <i>y</i>) | <b>Math function</b> that returns the larger of x or y.  |  | func Max(x, y float64) float64 
math.Min(<i>x</i>, <i>y</i>) | <b>Math function</b> that returns the smaller of x or y.  |  | func Min(x, y float64) float64 
math.Mod(<i>x</i>, <i>y</i>) | <b>Math function</b> that returns the floating-point remainder of x/y. The magnitude of the result is less than y and its sign agrees with that of x.  |  | func Mod(x, y float64) float64 
math.Modf(<i>f</i>) | <b>Math function</b> that returns integer and fractional floating-point numbers that sum to f. Both values have the same sign as f.  |  | func Modf(f float64) (int float64, frac float64) 
math.NaN(<i></i>) | <b>Math function</b> that returns an IEEE 754 “not-a-number” value.  |  | func NaN() float64 
math.Nextafter(<i>x</i>, <i>y</i>) | <b>Math function</b> that returns the next representable float64 value after x towards y.  |  | func Nextafter(x, y float64) (r float64) 
math.Nextafter32(<i>x</i>, <i>y</i>) | <b>Math function</b> that returns the next representable float32 value after x towards y.  |  | func Nextafter32(x, y float32) (r float32) 
math.Pow(<i>x</i>, <i>y</i>) | <b>Math function</b> that returns x**y, the base-x exponential of y.  |  | func Pow(x, y float64) float64 
math.Pow10(<i>n</i>) | <b>Math function</b> that returns 10**n, the base-10 exponential of n.  |  | func Pow10(n int) float64 
math.Remainder(<i>x</i>, <i>y</i>) | <b>Math function</b> that returns the IEEE 754 floating-point remainder of x/y.  |  | func Remainder(x, y float64) float64 
math.Round(<i>x</i>) | <b>Math function</b> that returns the nearest integer, rounding half away from zero.  |  | func Round(x float64) float64 
math.RoundToEven(<i>x</i>) | <b>Math function</b> that returns the nearest integer, rounding ties to even.  |  | func RoundToEven(x float64) float64 
math.Signbit(<i>x</i>) | <b>Math function</b> that reports whether x is negative or negative zero.  |  | func Signbit(x float64) bool 
math.Sin(<i>x</i>) | <b>Math function</b> that returns the sine of the radian argument x.  |  | func Sin(x float64) float64 
math.Sincos(<i>x</i>) | <b>Math function</b> that returns Sin(x), Cos(x).  |  | func Sincos(x float64) (sin, cos float64) 
math.Sinh(<i>x</i>) | <b>Math function</b> that returns the hyperbolic sine of x.  |  | func Sinh(x float64) float64 
math.Sqrt(<i>x</i>) | <b>Math function</b> that returns the square root of x.  |  | func Sqrt(x float64) float64 
math.Tan(<i>x</i>) | <b>Math function</b> that returns the tangent of the radian argument x.  |  | func Tan(x float64) float64 
math.Tanh(<i>x</i>) | <b>Math function</b> that returns the hyperbolic tangent of x.  |  | func Tanh(x float64) float64 
math.Trunc(<i>x</i>) | <b>Math function</b> that returns the integer value of x.  |  | func Trunc(x float64) float64 
math.Y0(<i>x</i>) | <b>Math function</b> that returns the order-zero Bessel function of the second kind.  |  | func Y0(x float64) float64 
math.Y1(<i>x</i>) | <b>Math function</b> that returns the order-one Bessel function of the second kind.  |  | func Y1(x float64) float64 
math.Yn(<i>n</i>, <i>x</i>) | <b>Math function</b> that returns the order-n Bessel function of the second kind.  |  | func Yn(n int, x float64) float64 
