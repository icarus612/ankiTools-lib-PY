sort.Find(<i>n</i>, <i>cmp</i>) | <b>Sort function</b> that uses binary search to find and return the smallest index i in [0, n) at which cmp(i) <= 0. If there is no such index i, Find returns i = n. The found result is true if i < n and cmp(i) == 0. Find calls cmp(i) only for i in the range [0, n).  |  | func Find(n int, cmp func(int) int) (i int, found bool) 
sort.Float64s(<i>x</i>) | <b>Sort function</b> that sorts a slice of float64s in increasing order. Not-a-number (NaN) values are ordered before other values.  |  | func Float64s(x []float64) 
sort.Float64sAreSorted(<i>x</i>) | <b>Sort function</b> that reports whether the slice x is sorted in increasing order, with not-a-number (NaN) values before any other values.  |  | func Float64sAreSorted(x []float64) bool 
sort.Ints(<i>x</i>) | <b>Sort function</b> that sorts a slice of ints in increasing order.  |  | func Ints(x []int) 
sort.IntsAreSorted(<i>x</i>) | <b>Sort function</b> that reports whether the slice x is sorted in increasing order.  |  | func IntsAreSorted(x []int) bool 
sort.IsSorted(<i>data</i>) | <b>Sort function</b> that reports whether data is sorted.  |  | func IsSorted(data Interface) bool 
sort.Search(<i>n</i>, <i>f</i>) | <b>Sort function</b> that uses binary search to find and return the smallest index i in [0, n) at which f(i) is true, assuming that on the range [0, n), f(i) == true implies f(i+1) == true. That is, Search requires that f is false for some (possibly empty) prefix of the input range [0, n) and then true for the (possibly empty) remainder; Search returns the first true index. If there is no such index, Search returns n. (Note that the "not found" return value is not -1 as in, for instance, strings.Index.) Search calls f(i) only for i in the range [0, n).  |  | func Search(n int, f func(int) bool) int 
sort.SearchFloat64s(<i>a</i>, <i>x</i>) | <b>Sort function</b> that searches for x in a sorted slice of float64s and returns the index as specified by Search. The return value is the index to insert x if x is not present (it could be len(a)). The slice must be sorted in ascending order.  |  | func SearchFloat64s(a []float64, x float64) int 
sort.SearchInts(<i>a</i>, <i>x</i>) | <b>Sort function</b> that searches for x in a sorted slice of ints and returns the index as specified by Search. The return value is the index to insert x if x is not present (it could be len(a)). The slice must be sorted in ascending order.  |  | func SearchInts(a []int, x int) int 
sort.SearchStrings(<i>a</i>, <i>x</i>) | <b>Sort function</b> that searches for x in a sorted slice of strings and returns the index as specified by Search. The return value is the index to insert x if x is not present (it could be len(a)). The slice must be sorted in ascending order.  |  | func SearchStrings(a []string, x string) int 
sort.Slice(<i>x</i>, <i>less</i>, <i>j</i>) | <b>Sort function</b> that sorts the slice x given the provided less function. It panics if x is not a slice.  |  | func Slice(x any, less func(i, j int) bool) 
sort.SliceIsSorted(<i>x</i>, <i>less</i>, <i>j</i>) | <b>Sort function</b> that reports whether the slice x is sorted according to the provided less function. It panics if x is not a slice.  |  | func SliceIsSorted(x any, less func(i, j int) bool) bool 
sort.SliceStable(<i>x</i>, <i>less</i>, <i>j</i>) | <b>Sort function</b> that sorts the slice x using the provided less function, keeping equal elements in their original order. It panics if x is not a slice.  |  | func SliceStable(x any, less func(i, j int) bool) 
sort.Sort(<i>data</i>) | <b>Sort function</b> that sorts data in ascending order as determined by the Less method. It makes one call to data.Len to determine n and O(n*log(n)) calls to data.Less and data.Swap. The sort is not guaranteed to be stable.  |  | func Sort(data Interface) 
sort.Stable(<i>data</i>) | <b>Sort function</b> that sorts data in ascending order as determined by the Less method, while keeping the original order of equal elements.  |  | func Stable(data Interface) 
sort.Strings(<i>x</i>) | <b>Sort function</b> that sorts a slice of strings in increasing order.  |  | func Strings(x []string) 
sort.StringsAreSorted(<i>x</i>) | <b>Sort function</b> that reports whether the slice x is sorted in increasing order.  |  | func StringsAreSorted(x []string) bool 
sort.Reverse(<i>data</i>) | <b>Sort function</b> that returns the reverse order for data.  |  | func Reverse(data Interface) Interface 
