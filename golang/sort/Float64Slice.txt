<i>Float64Slice</i>.Len(<i></i>) | <b>Sort function</b> that  reports whether x[i] should be ordered before x[j], as required by the sort Interface. Note that floating-point comparison by itself is not a transitive relation: it does not report a consistent ordering for not-a-number (NaN) values. This implementation of Less places NaN values before any others, by using:  |  | func (x Float64Slice) Len() int 
<i>Float64Slice</i>.Less(<i>i</i>, <i>j</i>) | <b>Sort function</b> that reports whether x[i] should be ordered before x[j], as required by the sort Interface. Note that floating-point comparison by itself is not a transitive relation: it does not report a consistent ordering for not-a-number (NaN) values. This implementation of Less places NaN values before any others, by using:  |  | func (x Float64Slice) Less(i, j int) bool 
<i>Float64Slice</i>.Search(<i>x</i>) | <b>Sort function</b> that returns the result of applying SearchFloat64s to the receiver and x.  |  | func (p Float64Slice) Search(x float64) int 
<i>Float64Slice</i>.Sort(<i></i>) | <b>Sort function</b> that is a convenience method: x.Sort() calls Sort(x).  |  | func (x Float64Slice) Sort() 
<i>Float64Slice</i>.Swap(<i>i</i>, <i>j</i>) | <b>Sort function</b> that ice attaches the methods of Interface to []int, sorting in increasing order.  |  | func (x Float64Slice) Swap(i, j int) 
