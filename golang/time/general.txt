time.After(<i>d</i>) | <b>Time function</b> that waits for the duration to elapse and then sends the current time on the returned channel. It is equivalent to NewTimer(d).C. The underlying Timer is not recovered by the garbage collector until the timer fires. If efficiency is a concern, use NewTimer instead and call Timer.Stop if the timer is no longer needed.  |  | func After(d Duration) <-chan Time 
time.Sleep(<i>d</i>) | <b>Time function</b> that pauses the current goroutine for at least the duration d. A negative or zero duration causes Sleep to return immediately.  |  | func Sleep(d Duration) 
time.Tick(<i>d</i>) | <b>Time function</b> that is a convenience wrapper for NewTicker providing access to the ticking channel only. While Tick is useful for clients that have no need to shut down the Ticker, be aware that without a way to shut it down the underlying Ticker cannot be recovered by the garbage collector; it "leaks". Unlike NewTicker, Tick will return nil if d <= 0.  |  | func Tick(d Duration) <-chan Time 
time.ParseDuration(<i>s</i>) | <b>Time function</b> that parses a duration string. A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as "300ms", "-1.5h" or "2h45m". Valid time units are "ns", "us" (or "Âµs"), "ms", "s", "m", "h".  |  | func ParseDuration(s string) (Duration, error) 
time.Since(<i>t</i>) | <b>Time function</b> that returns the time elapsed since t. It is shorthand for time.Now().Sub(t).  |  | func Since(t Time) Duration 
time.Until(<i>t</i>) | <b>Time function</b> that returns the duration until t. It is shorthand for t.Sub(time.Now()).  |  | func Until(t Time) Duration 
time.FixedZone(<i>name</i>, <i>offset</i>) | <b>Time function</b> that returns a Location that always uses the given zone name and offset (seconds east of UTC).  |  | func FixedZone(name string, offset int) *Location 
time.LoadLocation(<i>name</i>) | <b>Time function</b> that returns the Location with the given name.  |  | func LoadLocation(name string) (*Location, error) 
time.LoadLocationFromTZData(<i>name</i>, <i>data</i>) | <b>Time function</b> that returns a Location with the given name initialized from the IANA Time Zone database-formatted data. The data should be in the format of a standard IANA time zone file (for example, the content of /etc/localtime on Unix systems).  |  | func LoadLocationFromTZData(name string, data []byte) (*Location, error) 
time.NewTicker(<i>d</i>) | <b>Time function</b> that returns a new Ticker containing a channel that will send the current time on the channel after each tick. The period of the ticks is specified by the duration argument. The ticker will adjust the time interval or drop ticks to make up for slow receivers. The duration d must be greater than zero; if not, NewTicker will panic. Stop the ticker to release associated resources.  |  | func NewTicker(d Duration) *Ticker 
time.Date(<i>year</i>, <i>month</i>, <i>day</i>, <i>hour</i>, <i>min</i>, <i>sec</i>, <i>nsec</i>, <i>loc</i>) | <b>Time function</b> that returns the Time corresponding to  |  | func Date(year int, month Month, day, hour, min, sec, nsec int, loc *Location) Time 
time.Now(<i></i>) | <b>Time function</b> that returns the current local time.  |  | func Now() Time 
time.Parse(<i>layout</i>, <i>value</i>) | <b>Time function</b> that parses a formatted string and returns the time value it represents. See the documentation for the constant called Layout to see how to represent the format. The second argument must be parseable using the format string (layout) provided as the first argument.  |  | func Parse(layout, value string) (Time, error) 
time.ParseInLocation(<i>layout</i>, <i>value</i>, <i>loc</i>) | <b>Time function</b> that is like Parse but differs in two important ways. First, in the absence of time zone information, Parse interprets a time as UTC; ParseInLocation interprets the time as in the given location. Second, when given a zone offset or abbreviation, Parse tries to match it against the Local location; ParseInLocation uses the given location.  |  | func ParseInLocation(layout, value string, loc *Location) (Time, error) 
time.Unix(<i>sec</i>, <i>nsec</i>) | <b>Time function</b> that returns the local Time corresponding to the given Unix time, sec seconds and nsec nanoseconds since January 1, 1970 UTC. It is valid to pass nsec outside the range [0, 999999999]. Not all sec values have a corresponding time value. One such value is 1<<63-1 (the largest int64 value).  |  | func Unix(sec int64, nsec int64) Time 
time.UnixMicro(<i>usec</i>) | <b>Time function</b> that returns the local Time corresponding to the given Unix time, usec microseconds since January 1, 1970 UTC.  |  | func UnixMicro(usec int64) Time 
time.UnixMilli(<i>msec</i>) | <b>Time function</b> that returns the local Time corresponding to the given Unix time, msec milliseconds since January 1, 1970 UTC.  |  | func UnixMilli(msec int64) Time 
time.AfterFunc(<i>d</i>, <i>f</i>) | <b>Time function</b> that waits for the duration to elapse and then calls f in its own goroutine. It returns a Timer that can be used to cancel the call using its Stop method.  |  | func AfterFunc(d Duration, f func()) *Timer 
time.NewTimer(<i>d</i>) | <b>Time function</b> that creates a new Timer that will send the current time on its channel after at least duration d.  |  | func NewTimer(d Duration) *Timer 
