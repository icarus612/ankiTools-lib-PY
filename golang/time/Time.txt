<i>Time</i>.Add(<i>d</i>) | <b>Time function</b> that returns the time t+d.  |  | func (t Time) Add(d Duration) Time 
<i>Time</i>.AddDate(<i>years</i>, <i>months</i>, <i>days</i>) | <b>Time function</b> that returns the time corresponding to adding the given number of years, months, and days to t. For example, AddDate(-1, 2, 3) applied to January 1, 2011 returns March 4, 2010.  |  | func (t Time) AddDate(years int, months int, days int) Time 
<i>Time</i>.After(<i>u</i>) | <b>Time function</b> that reports whether the time instant t is after u.  |  | func (t Time) After(u Time) bool 
<i>Time</i>.AppendFormat(<i>b</i>, <i>layout</i>) | <b>Time function</b> that is like Format but appends the textual representation to b and returns the extended buffer.  |  | func (t Time) AppendFormat(b []byte, layout string) []byte 
<i>Time</i>.Before(<i>u</i>) | <b>Time function</b> that reports whether the time instant t is before u.  |  | func (t Time) Before(u Time) bool 
<i>Time</i>.Clock(<i></i>) | <b>Time function</b> that returns the hour, minute, and second within the day specified by t.  |  | func (t Time) Clock() (hour, min, sec int) 
<i>Time</i>.Compare(<i>u</i>) | <b>Time function</b> that compares the time instant t with u. If t is before u, it returns -1; if t is after u, it returns +1; if they're the same, it returns 0.  |  | func (t Time) Compare(u Time) int 
<i>Time</i>.Date(<i></i>) | <b>Time function</b> that returns the year, month, and day in which t occurs.  |  | func (t Time) Date() (year int, month Month, day int) 
<i>Time</i>.Day(<i></i>) | <b>Time function</b> that returns the day of the month specified by t.  |  | func (t Time) Day() int 
<i>Time</i>.Equal(<i>u</i>) | <b>Time function</b> that reports whether t and u represent the same time instant. Two times can be equal even if they are in different locations. For example, 6:00 +0200 and 4:00 UTC are Equal. See the documentation on the Time type for the pitfalls of using == with Time values; most code should use Equal instead.  |  | func (t Time) Equal(u Time) bool 
<i>Time</i>.Format(<i>layout</i>) | <b>Time function</b> that returns a textual representation of the time value formatted according to the layout defined by the argument. See the documentation for the constant called Layout to see how to represent the layout format.  |  | func (t Time) Format(layout string) string 
<i>Time</i>.GoString(<i></i>) | <b>Time function</b> that implements fmt.GoStringer and formats t to be printed in Go source code.  |  | func (t Time) GoString() string 
<i>Time</i>.GobDecode(<i>data</i>) | <b>Time function</b> that implements the gob.GobDecoder interface.  |  | func (t *Time) GobDecode(data []byte) error 
<i>Time</i>.GobEncode(<i></i>) | <b>Time function</b> that implements the gob.GobEncoder interface.  |  | func (t Time) GobEncode() ([]byte, error) 
<i>Time</i>.Hour(<i></i>) | <b>Time function</b> that returns the hour within the day specified by t, in the range [0, 23].  |  | func (t Time) Hour() int 
<i>Time</i>.ISOWeek(<i></i>) | <b>Time function</b> that returns the ISO 8601 year and week number in which t occurs. Week ranges from 1 to 53. Jan 01 to Jan 03 of year n might belong to week 52 or 53 of year n-1, and Dec 29 to Dec 31 might belong to week 1 of year n+1.  |  | func (t Time) ISOWeek() (year, week int) 
<i>Time</i>.In(<i>loc</i>) | <b>Time function</b> that returns a copy of t representing the same time instant, but with the copy's location information set to loc for display purposes.  |  | func (t Time) In(loc *Location) Time 
<i>Time</i>.IsDST(<i></i>) | <b>Time function</b> that reports whether the time in the configured location is in Daylight Savings Time.  |  | func (t Time) IsDST() bool 
<i>Time</i>.IsZero(<i></i>) | <b>Time function</b> that reports whether t represents the zero time instant, January 1, year 1, 00:00:00 UTC.  |  | func (t Time) IsZero() bool 
<i>Time</i>.Local(<i></i>) | <b>Time function</b> that returns t with the location set to local time.  |  | func (t Time) Local() Time 
<i>Time</i>.Location(<i></i>) | <b>Time function</b> that returns the time zone information associated with t.  |  | func (t Time) Location() *Location 
<i>Time</i>.MarshalBinary(<i></i>) | <b>Time function</b> that implements the encoding.BinaryMarshaler interface.  |  | func (t Time) MarshalBinary() ([]byte, error) 
<i>Time</i>.MarshalJSON(<i></i>) | <b>Time function</b> that implements the json.Marshaler interface. The time is a quoted string in the RFC 3339 format with sub-second precision. If the timestamp cannot be represented as valid RFC 3339 (e.g., the year is out of range), then an error is reported.  |  | func (t Time) MarshalJSON() ([]byte, error) 
<i>Time</i>.MarshalText(<i></i>) | <b>Time function</b> that implements the encoding.TextMarshaler interface. The time is formatted in RFC 3339 format with sub-second precision. If the timestamp cannot be represented as valid RFC 3339 (e.g., the year is out of range), then an error is reported.  |  | func (t Time) MarshalText() ([]byte, error) 
<i>Time</i>.Minute(<i></i>) | <b>Time function</b> that returns the minute offset within the hour specified by t, in the range [0, 59].  |  | func (t Time) Minute() int 
<i>Time</i>.Month(<i></i>) | <b>Time function</b> that returns the month of the year specified by t.  |  | func (t Time) Month() Month 
<i>Time</i>.Nanosecond(<i></i>) | <b>Time function</b> that returns the nanosecond offset within the second specified by t, in the range [0, 999999999].  |  | func (t Time) Nanosecond() int 
<i>Time</i>.Round(<i>d</i>) | <b>Time function</b> that returns the result of rounding t to the nearest multiple of d (since the zero time). The rounding behavior for halfway values is to round up. If d <= 0, Round returns t stripped of any monotonic clock reading but otherwise unchanged.  |  | func (t Time) Round(d Duration) Time 
<i>Time</i>.Second(<i></i>) | <b>Time function</b> that returns the second offset within the minute specified by t, in the range [0, 59].  |  | func (t Time) Second() int 
<i>Time</i>.String(<i></i>) | <b>Time function</b> that returns the time formatted using the format string  |  | func (t Time) String() string 
<i>Time</i>.Sub(<i>u</i>) | <b>Time function</b> that returns the duration t-u. If the result exceeds the maximum (or minimum) value that can be stored in a Duration, the maximum (or minimum) duration will be returned. To compute t-d for a duration d, use t.Add(-d).  |  | func (t Time) Sub(u Time) Duration 
<i>Time</i>.Truncate(<i>d</i>) | <b>Time function</b> that returns the result of rounding t down to a multiple of d (since the zero time). If d <= 0, Truncate returns t stripped of any monotonic clock reading but otherwise unchanged.  |  | func (t Time) Truncate(d Duration) Time 
<i>Time</i>.UTC(<i></i>) | <b>Time function</b> that returns t with the location set to UTC.  |  | func (t Time) UTC() Time 
<i>Time</i>.Unix(<i></i>) | <b>Time function</b> that returns t as a Unix time, the number of seconds elapsed since January 1, 1970 UTC. The result does not depend on the location associated with t. Unix-like operating systems often record time as a 32-bit count of seconds, but since the method here returns a 64-bit value it is valid for billions of years into the past or future.  |  | func (t Time) Unix() int64 
<i>Time</i>.UnixMicro(<i></i>) | <b>Time function</b> that returns t as a Unix time, the number of microseconds elapsed since January 1, 1970 UTC. The result is undefined if the Unix time in microseconds cannot be represented by an int64 (a date before year -290307 or after year 294246). The result does not depend on the location associated with t.  |  | func (t Time) UnixMicro() int64 
<i>Time</i>.UnixMilli(<i></i>) | <b>Time function</b> that returns t as a Unix time, the number of milliseconds elapsed since January 1, 1970 UTC. The result is undefined if the Unix time in milliseconds cannot be represented by an int64 (a date more than 292 million years before or after 1970). The result does not depend on the location associated with t.  |  | func (t Time) UnixMilli() int64 
<i>Time</i>.UnixNano(<i></i>) | <b>Time function</b> that returns t as a Unix time, the number of nanoseconds elapsed since January 1, 1970 UTC. The result is undefined if the Unix time in nanoseconds cannot be represented by an int64 (a date before the year 1678 or after 2262). Note that this means the result of calling UnixNano on the zero Time is undefined. The result does not depend on the location associated with t.  |  | func (t Time) UnixNano() int64 
<i>Time</i>.UnmarshalBinary(<i>data</i>) | <b>Time function</b> that implements the encoding.BinaryUnmarshaler interface.  |  | func (t *Time) UnmarshalBinary(data []byte) error 
<i>Time</i>.UnmarshalJSON(<i>data</i>) | <b>Time function</b> that implements the json.Unmarshaler interface. The time must be a quoted string in the RFC 3339 format.  |  | func (t *Time) UnmarshalJSON(data []byte) error 
<i>Time</i>.UnmarshalText(<i>data</i>) | <b>Time function</b> that implements the encoding.TextUnmarshaler interface. The time must be in the RFC 3339 format.  |  | func (t *Time) UnmarshalText(data []byte) error 
<i>Time</i>.Weekday(<i></i>) | <b>Time function</b> that returns the day of the week specified by t.  |  | func (t Time) Weekday() Weekday 
<i>Time</i>.Year(<i></i>) | <b>Time function</b> that returns the year in which t occurs.  |  | func (t Time) Year() int 
<i>Time</i>.YearDay(<i></i>) | <b>Time function</b> that returns the day of the year specified by t, in the range [1,365] for non-leap years, and [1,366] in leap years.  |  | func (t Time) YearDay() int 
<i>Time</i>.Zone(<i></i>) | <b>Time function</b> that computes the time zone in effect at time t, returning the abbreviated name of the zone (such as "CET") and its offset in seconds east of UTC.  |  | func (t Time) Zone() (name string, offset int) 
<i>Time</i>.ZoneBounds(<i></i>) | <b>Time function</b> that returns the bounds of the time zone in effect at time t. The zone begins at start and the next zone begins at end. If the zone begins at the beginning of time, start will be returned as a zero Time. If the zone goes on forever, end will be returned as a zero Time. The Location of the returned times will be the same as t.  |  | func (t Time) ZoneBounds() (start, end Time) 
