os.Chdir(<i>dir</i>) | <b>Os function</b> that changes the current working directory to the named directory. If there is an error, it will be of type *PathError.  |  | func Chdir(dir string) error 
os.Chmod(<i>name</i>, <i>mode</i>) | <b>Os function</b> that changes the mode of the named file to mode. If the file is a symbolic link, it changes the mode of the link's target. If there is an error, it will be of type *PathError.  |  | func Chmod(name string, mode FileMode) error 
os.Chown(<i>name</i>, <i>uid</i>, <i>gid</i>) | <b>Os function</b> that changes the numeric uid and gid of the named file. If the file is a symbolic link, it changes the uid and gid of the link's target. A uid or gid of -1 means to not change that value. If there is an error, it will be of type *PathError.  |  | func Chown(name string, uid, gid int) error 
os.Chtimes(<i>name</i>, <i>atime</i>, <i>mtime</i>) | <b>Os function</b> that changes the access and modification times of the named file, similar to the Unix utime() or utimes() functions.  |  | func Chtimes(name string, atime time.Time, mtime time.Time) error 
os.Clearenv(<i></i>) | <b>Os function</b> that deletes all environment variables.  |  | func Clearenv() 
os.DirFS(<i>dir</i>) | <b>Os function</b> that returns a file system (an fs.FS) for the tree of files rooted at the directory dir.  |  | func DirFS(dir string) fs.FS 
os.Environ(<i></i>) | <b>Os function</b> that returns a copy of strings representing the environment, in the form "key=value".  |  | func Environ() []string 
os.Executable(<i></i>) | <b>Os function</b> that returns the path name for the executable that started the current process. There is no guarantee that the path is still pointing to the correct executable. If a symlink was used to start the process, depending on the operating system, the result might be the symlink or the path it pointed to. If a stable result is needed, path/filepath.EvalSymlinks might help.  |  | func Executable() (string, error) 
os.Exit(<i>code</i>) | <b>Os function</b> that causes the current program to exit with the given status code. Conventionally, code zero indicates success, non-zero an error. The program terminates immediately; deferred functions are not run.  |  | func Exit(code int) 
os.Expand(<i>s</i>, <i>mapping</i>) | <b>Os function</b> that replaces ${var} or $var in the string based on the mapping function. For example, os.ExpandEnv(s) is equivalent to os.Expand(s, os.Getenv).  |  | func Expand(s string, mapping func(string) string) string 
os.ExpandEnv(<i>s</i>) | <b>Os function</b> that replaces ${var} or $var in the string according to the values of the current environment variables. References to undefined variables are replaced by the empty string.  |  | func ExpandEnv(s string) string 
os.Getegid(<i></i>) | <b>Os function</b> that returns the numeric effective group id of the caller.  |  | func Getegid() int 
os.Getenv(<i>key</i>) | <b>Os function</b> that retrieves the value of the environment variable named by the key. It returns the value, which will be empty if the variable is not present. To distinguish between an empty value and an unset value, use LookupEnv.  |  | func Getenv(key string) string 
os.Geteuid(<i></i>) | <b>Os function</b> that returns the numeric effective user id of the caller.  |  | func Geteuid() int 
os.Getgid(<i></i>) | <b>Os function</b> that returns the numeric group id of the caller.  |  | func Getgid() int 
os.Getgroups(<i></i>) | <b>Os function</b> that returns a list of the numeric ids of groups that the caller belongs to.  |  | func Getgroups() ([]int, error) 
os.Getpagesize(<i></i>) | <b>Os function</b> that returns the underlying system's memory page size.  |  | func Getpagesize() int 
os.Getpid(<i></i>) | <b>Os function</b> that returns the process id of the caller.  |  | func Getpid() int 
os.Getppid(<i></i>) | <b>Os function</b> that returns the process id of the caller's parent.  |  | func Getppid() int 
os.Getuid(<i></i>) | <b>Os function</b> that returns the numeric user id of the caller.  |  | func Getuid() int 
os.Getwd(<i></i>) | <b>Os function</b> that returns a rooted path name corresponding to the current directory. If the current directory can be reached via multiple paths (due to symbolic links), Getwd may return any one of them.  |  | func Getwd() (dir string, err error) 
os.Hostname(<i></i>) | <b>Os function</b> that returns the host name reported by the kernel.  |  | func Hostname() (name string, err error) 
os.IsExist(<i>err</i>) | <b>Os function</b> that returns a boolean indicating whether the error is known to report that a file or directory already exists. It is satisfied by ErrExist as well as some syscall errors.  |  | func IsExist(err error) bool 
os.IsNotExist(<i>err</i>) | <b>Os function</b> that returns a boolean indicating whether the error is known to report that a file or directory does not exist. It is satisfied by ErrNotExist as well as some syscall errors.  |  | func IsNotExist(err error) bool 
os.IsPathSeparator(<i>c</i>) | <b>Os function</b> that reports whether c is a directory separator character.  |  | func IsPathSeparator(c uint8) bool 
os.IsPermission(<i>err</i>) | <b>Os function</b> that returns a boolean indicating whether the error is known to report that permission is denied. It is satisfied by ErrPermission as well as some syscall errors.  |  | func IsPermission(err error) bool 
os.IsTimeout(<i>err</i>) | <b>Os function</b> that returns a boolean indicating whether the error is known to report that a timeout occurred.  |  | func IsTimeout(err error) bool 
os.Lchown(<i>name</i>, <i>uid</i>, <i>gid</i>) | <b>Os function</b> that changes the numeric uid and gid of the named file. If the file is a symbolic link, it changes the uid and gid of the link itself. If there is an error, it will be of type *PathError.  |  | func Lchown(name string, uid, gid int) error 
os.Link(<i>oldname</i>, <i>newname</i>) | <b>Os function</b> that creates newname as a hard link to the oldname file. If there is an error, it will be of type *LinkError.  |  | func Link(oldname, newname string) error 
os.LookupEnv(<i>key</i>) | <b>Os function</b> that retrieves the value of the environment variable named by the key. If the variable is present in the environment the value (which may be empty) is returned and the boolean is true. Otherwise the returned value will be empty and the boolean will be false.  |  | func LookupEnv(key string) (string, bool) 
os.Mkdir(<i>name</i>, <i>perm</i>) | <b>Os function</b> that creates a new directory with the specified name and permission bits (before umask). If there is an error, it will be of type *PathError.  |  | func Mkdir(name string, perm FileMode) error 
os.MkdirAll(<i>path</i>, <i>perm</i>) | <b>Os function</b> that creates a directory named path, along with any necessary parents, and returns nil, or else returns an error. The permission bits perm (before umask) are used for all directories that MkdirAll creates. If path is already a directory, MkdirAll does nothing and returns nil.  |  | func MkdirAll(path string, perm FileMode) error 
os.MkdirTemp(<i>dir</i>, <i>pattern</i>) | <b>Os function</b> that creates a new temporary directory in the directory dir and returns the pathname of the new directory. The new directory's name is generated by adding a random string to the end of pattern. If pattern includes a "*", the random string replaces the last "*" instead. If dir is the empty string, MkdirTemp uses the default directory for temporary files, as returned by TempDir. Multiple programs or goroutines calling MkdirTemp simultaneously will not choose the same directory. It is the caller's responsibility to remove the directory when it is no longer needed.  |  | func MkdirTemp(dir, pattern string) (string, error) 
os.NewSyscallError(<i>syscall</i>, <i>err</i>) | <b>Os function</b> that returns, as an error, a new SyscallError with the given system call name and error details. As a convenience, if err is nil, NewSyscallError returns nil.  |  | func NewSyscallError(syscall string, err error) error 
os.Pipe(<i></i>) | <b>Os function</b> that returns a connected pair of Files; reads from r return bytes written to w. It returns the files and an error, if any.  |  | func Pipe() (r *File, w *File, err error) 
os.ReadFile(<i>name</i>) | <b>Os function</b> that reads the named file and returns the contents. A successful call returns err == nil, not err == EOF. Because ReadFile reads the whole file, it does not treat an EOF from Read as an error to be reported.  |  | func ReadFile(name string) ([]byte, error) 
os.Readlink(<i>name</i>) | <b>Os function</b> that returns the destination of the named symbolic link. If there is an error, it will be of type *PathError.  |  | func Readlink(name string) (string, error) 
os.Remove(<i>name</i>) | <b>Os function</b> that removes the named file or (empty) directory. If there is an error, it will be of type *PathError.  |  | func Remove(name string) error 
os.RemoveAll(<i>path</i>) | <b>Os function</b> that removes path and any children it contains. It removes everything it can but returns the first error it encounters. If the path does not exist, RemoveAll returns nil (no error). If there is an error, it will be of type *PathError.  |  | func RemoveAll(path string) error 
os.Rename(<i>oldpath</i>, <i>newpath</i>) | <b>Os function</b> that renames (moves) oldpath to newpath. If newpath already exists and is not a directory, Rename replaces it. OS-specific restrictions may apply when oldpath and newpath are in different directories. Even within the same directory, on non-Unix platforms Rename is not an atomic operation. If there is an error, it will be of type *LinkError.  |  | func Rename(oldpath, newpath string) error 
os.SameFile(<i>fi1</i>, <i>fi2</i>) | <b>Os function</b> that reports whether fi1 and fi2 describe the same file. For example, on Unix this means that the device and inode fields of the two underlying structures are identical; on other systems the decision may be based on the path names. SameFile only applies to results returned by this package's Stat. It returns false in other cases.  |  | func SameFile(fi1, fi2 FileInfo) bool 
os.Setenv(<i>key</i>, <i>value</i>) | <b>Os function</b> that sets the value of the environment variable named by the key. It returns an error, if any.  |  | func Setenv(key, value string) error 
os.Symlink(<i>oldname</i>, <i>newname</i>) | <b>Os function</b> that creates newname as a symbolic link to oldname. On Windows, a symlink to a non-existent oldname creates a file symlink; if oldname is later created as a directory the symlink will not work. If there is an error, it will be of type *LinkError.  |  | func Symlink(oldname, newname string) error 
os.TempDir(<i></i>) | <b>Os function</b> that returns the default directory to use for temporary files.  |  | func TempDir() string 
os.Truncate(<i>name</i>, <i>size</i>) | <b>Os function</b> that changes the size of the named file. If the file is a symbolic link, it changes the size of the link's target. If there is an error, it will be of type *PathError.  |  | func Truncate(name string, size int64) error 
os.Unsetenv(<i>key</i>) | <b>Os function</b> that unsets a single environment variable.  |  | func Unsetenv(key string) error 
os.UserCacheDir(<i></i>) | <b>Os function</b> that returns the default root directory to use for user-specific cached data. Users should create their own application-specific subdirectory within this one and use that.  |  | func UserCacheDir() (string, error) 
os.UserConfigDir(<i></i>) | <b>Os function</b> that returns the default root directory to use for user-specific configuration data. Users should create their own application-specific subdirectory within this one and use that.  |  | func UserConfigDir() (string, error) 
os.UserHomeDir(<i></i>) | <b>Os function</b> that returns the current user's home directory.  |  | func UserHomeDir() (string, error) 
os.WriteFile(<i>name</i>, <i>data</i>, <i>perm</i>) | <b>Os function</b> that writes data to the named file, creating it if necessary. If the file does not exist, WriteFile creates it with permissions perm (before umask); otherwise WriteFile truncates it before writing, without changing permissions. Since Writefile requires multiple system calls to complete, a failure mid-operation can leave the file in a partially written state.  |  | func WriteFile(name string, data []byte, perm FileMode) error 
os.ReadDir(<i>name</i>) | <b>Os function</b> that reads the named directory, returning all its directory entries sorted by filename. If an error occurs reading the directory, ReadDir returns the entries it was able to read before the error, along with the error.  |  | func ReadDir(name string) ([]DirEntry, error) 
os.Create(<i>name</i>) | <b>Os function</b> that creates or truncates the named file. If the file already exists, it is truncated. If the file does not exist, it is created with mode 0666 (before umask). If successful, methods on the returned File can be used for I/O; the associated file descriptor has mode O_RDWR. If there is an error, it will be of type *PathError.  |  | func Create(name string) (*File, error) 
os.CreateTemp(<i>dir</i>, <i>pattern</i>) | <b>Os function</b> that creates a new temporary file in the directory dir, opens the file for reading and writing, and returns the resulting file. The filename is generated by taking pattern and adding a random string to the end. If pattern includes a "*", the random string replaces the last "*". If dir is the empty string, CreateTemp uses the default directory for temporary files, as returned by TempDir. Multiple programs or goroutines calling CreateTemp simultaneously will not choose the same file. The caller can use the file's Name method to find the pathname of the file. It is the caller's responsibility to remove the file when it is no longer needed.  |  | func CreateTemp(dir, pattern string) (*File, error) 
os.NewFile(<i>fd</i>, <i>name</i>) | <b>Os function</b> that returns a new File with the given file descriptor and name. The returned value will be nil if fd is not a valid file descriptor. On Unix systems, if the file descriptor is in non-blocking mode, NewFile will attempt to return a pollable File (one for which the SetDeadline methods work).  |  | func NewFile(fd uintptr, name string) *File 
os.Open(<i>name</i>) | <b>Os function</b> that opens the named file for reading. If successful, methods on the returned file can be used for reading; the associated file descriptor has mode O_RDONLY. If there is an error, it will be of type *PathError.  |  | func Open(name string) (*File, error) 
os.OpenFile(<i>name</i>, <i>flag</i>, <i>perm</i>) | <b>Os function</b> that is the generalized open call; most users will use Open or Create instead. It opens the named file with specified flag (O_RDONLY etc.). If the file does not exist, and the O_CREATE flag is passed, it is created with mode perm (before umask). If successful, methods on the returned File can be used for I/O. If there is an error, it will be of type *PathError.  |  | func OpenFile(name string, flag int, perm FileMode) (*File, error) 
os.Lstat(<i>name</i>) | <b>Os function</b> that returns a FileInfo describing the named file. If the file is a symbolic link, the returned FileInfo describes the symbolic link. Lstat makes no attempt to follow the link. If there is an error, it will be of type *PathError.  |  | func Lstat(name string) (FileInfo, error) 
os.Stat(<i>name</i>) | <b>Os function</b> that returns a FileInfo describing the named file. If there is an error, it will be of type *PathError.  |  | func Stat(name string) (FileInfo, error) 
os.FindProcess(<i>pid</i>) | <b>Os function</b> that looks for a running process by its pid.  |  | func FindProcess(pid int) (*Process, error) 
os.StartProcess(<i>name</i>, <i>argv</i>, <i>attr</i>) | <b>Os function</b> that starts a new process with the program, arguments and attributes specified by name, argv and attr. The argv slice will become os.Args in the new process, so it normally starts with the program name.  |  | func StartProcess(name string, argv []string, attr *ProcAttr) (*Process, error) 
