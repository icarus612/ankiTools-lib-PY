<i>Process</i>.Kill(<i></i>) | <b>Os function</b> that causes the Process to exit immediately. Kill does not wait until the Process has actually exited. This only kills the Process itself, not any other processes it may have started.  |  | func (p *Process) Kill() error 
<i>Process</i>.Release(<i></i>) | <b>Os function</b> that releases any resources associated with the Process p, rendering it unusable in the future. Release only needs to be called if Wait is not.  |  | func (p *Process) Release() error 
<i>Process</i>.Signal(<i>sig</i>) | <b>Os function</b> that sends a signal to the Process. Sending Interrupt on Windows is not implemented.  |  | func (p *Process) Signal(sig Signal) error 
<i>Process</i>.Wait(<i></i>) | <b>Os function</b> that waits for the Process to exit, and then returns a ProcessState describing its status and an error, if any. Wait releases any resources associated with the Process. On most operating systems, the Process must be a child of the current process or an error will be returned.  |  | func (p *Process) Wait() (*ProcessState, error) 
