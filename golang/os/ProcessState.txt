<i>ProcessState</i>.ExitCode(<i></i>) | <b>Os function</b> that returns the exit code of the exited process, or -1 if the process hasn't exited or was terminated by a signal.  |  | func (p *ProcessState) ExitCode() int 
<i>ProcessState</i>.Exited(<i></i>) | <b>Os function</b> that reports whether the program has exited. On Unix systems this reports true if the program exited due to calling exit, but false if the program terminated due to a signal.  |  | func (p *ProcessState) Exited() bool 
<i>ProcessState</i>.Pid(<i></i>) | <b>Os function</b> that returns the process id of the exited process.  |  | func (p *ProcessState) Pid() int 
<i>ProcessState</i>.String(<i></i>) | <b>Os function</b> that  reports whether the program exited successfully, such as with exit status 0 on Unix.  |  | func (p *ProcessState) String() string 
<i>ProcessState</i>.Success(<i></i>) | <b>Os function</b> that reports whether the program exited successfully, such as with exit status 0 on Unix.  |  | func (p *ProcessState) Success() bool 
<i>ProcessState</i>.Sys(<i></i>) | <b>Os function</b> that returns system-dependent exit information about the process. Convert it to the appropriate underlying type, such as syscall.WaitStatus on Unix, to access its contents.  |  | func (p *ProcessState) Sys() any 
<i>ProcessState</i>.SysUsage(<i></i>) | <b>Os function</b> that returns system-dependent resource usage information about the exited process. Convert it to the appropriate underlying type, such as *syscall.Rusage on Unix, to access its contents. (On Unix, *syscall.Rusage matches struct rusage as defined in the getrusage(2) manual page.)  |  | func (p *ProcessState) SysUsage() any 
<i>ProcessState</i>.SystemTime(<i></i>) | <b>Os function</b> that returns the system CPU time of the exited process and its children.  |  | func (p *ProcessState) SystemTime() time.Duration 
<i>ProcessState</i>.UserTime(<i></i>) | <b>Os function</b> that returns the user CPU time of the exited process and its children.  |  | func (p *ProcessState) UserTime() time.Duration 
