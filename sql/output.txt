<b>Command</b>: ALTER | <b>SQL command</b> used to add columns to a table in a database. | ALTER TABLE table_name ADD column_name datatype; 
<b>Command</b>: AND | <b>SQL command</b> used as an operator that is used to combine two conditions. | SELECT column_name(s)FROM table_nameWHERE column_1 = value_1  AND column_2 = value_2; 
<b>Command</b>: AS | <b>SQL command</b> used as a keyword in sql that is used to rename a column or table using an alias name. | SELECT column_name AS ‘Alias’ FROM table_name; 
<b>Command</b>: AVG | <b>SQL command</b> used to aggregate a numeric column and return its average. | SELECT AVG(column_name)FROM table_name; 
<b>Command</b>: BETWEEN | <b>SQL command</b> used as an operation used to filter the result within a certain range. | SELECT column_name(s)FROM table_nameWHERE column_name BETWEEN value_1 AND value_2; 
<b>Command</b>: CASE | <b>SQL command</b> used as a statement used to create different outputs inside a select statement. | SELECT column_name,CASEWHEN condition THEN ‘Result_1’WHEN condition THEN ‘Result_2’ELSE ‘Result_3’ENDFROM table_name; 
<b>Command</b>: COUNT | <b>SQL command</b> used as a function that takes the name of a column as an argument and counts the number of rows when the column is not null. | SELECT COUNT(column_name)FROM table_name; 
<b>Command</b>: Create TABLE | <b>SQL command</b> used to create a new table in a database and specify the name of the table and columns inside it. | CREATE TABLE table_name (  column_1 datatype,   column_2 datatype,   column_3 datatype); 
<b>Command</b>: DELETE | <b>SQL command</b> used to remove the rows from a table. | DELETE FROM table_nameWHERE some_column = some_value; 
<b>Command</b>: GROUP BY | <b>SQL command</b> used as a clause in sql used for aggregate functions in collaboration with the select statement. | SELECT column_name, COUNT(*)FROM table_nameGROUP BY column_name; 
<b>Command</b>: HAVING | <b>SQL command</b> used when the where keyword cannot be used in aggregating functions. | SELECT column_name, COUNT(*)FROM table_nameGROUP BY column_nameHAVING COUNT(*) > value; 
<b>Command</b>: INNER JOIN | <b>SQL command</b> used to combine rows from different tables if the join condition goes true. | SELECT column_name(s)FROM table_1JOIN table_2  ON table_1.column_name = table_2.column_name; 
<b>Command</b>: INSERT | <b>SQL command</b> used to add new rows to a table. | INSERT INTO table_name (column_1, column_2, column_3) VALUES (value_1, ‘value_2’, value_3); 
<b>Command</b>: IS (NOT) NULL | <b>SQL command</b> used as an operator used with the where clause to check for the empty values. | SELECT column_name(s)FROM table_nameWHERE column_name IS NULL; 
<b>Command</b>: LIKE | <b>SQL command</b> used as a special operator used with the where clause to search for a specific pattern in a column. | SELECT column_name(s)FROM table_nameWHERE column_name LIKE pattern; 
<b>Command</b>: LIMIT | <b>SQL command</b> used as a clause to specify the maximum number of rows the result set must have. | SELECT column_name(s)FROM table_nameLIMIT number; 
<b>Command</b>: MAX | <b>SQL command</b> used as a function that takes a number of columns as an argument and returns the largest value among them. | SELECT MAX(column_name)FROM table_name; 
<b>Command</b>: MIN | <b>SQL command</b> used as a function that takes a number of columns as an argument and returns the smallest value among them. | SELECT MIN(column_name)FROM table_name; 
<b>Command</b>: OR | <b>SQL command</b> used as an operator that is used to filter the result set to contain only the rows where either condition is true. | SELECT column_nameFROM table_nameWHERE column_name = value_1   OR column_name = value_2; 
<b>Command</b>: ORDER BY | <b>SQL command</b> used as a clause used to sort the result set by a particular column either numerically or alphabetically. | SELECT column_nameFROM table_nameORDER BY column_name ASC | DESC; 
<b>Command</b>: OUTER JOIN | <b>SQL command</b> used assued to combine rows from different tables even if the condition is not true. | SELECT column_name(s)FROM table_1LEFT JOIN table_2  ON table_1.column_name = table_2.column_name; 
<b>Command</b>: LEFT JOIN | <b>SQL command</b> used assued to combine rows from different tables even if the condition is not true. | SELECT column_name(s)FROM table_1LEFT JOIN table_2  ON table_1.column_name = table_2.column_name; 
<b>Command</b>: RIGHT JOIN | <b>SQL command</b> used assued to combine rows from different tables even if the condition is not true. | SELECT column_name(s)FROM table_1LEFT JOIN table_2  ON table_1.column_name = table_2.column_name; 
<b>Command</b>: ROUND | <b>SQL command</b> used as a function that takes the column name and an integer as an argument and rounds the values in a column to the number of decimal places specified by an integer. | SELECT ROUND(column_name, integer)FROM table_name; 
<b>Command</b>: SELECT | <b>SQL command</b> used as a statement that is used to fetch data from a database. | SELECT column_name FROM table_name; 
<b>Command</b>: SELECT DISTINCT | <b>SQL command</b> used to specify that the statement is a query that returns unique values in specified columns. | SELECT DISTINCT column_nameFROM table_name; 
<b>Command</b>: SUM | <b>SQL command</b> used as a function used to return the sum of values from a particular column. | SELECT SUM(column_name)FROM table_name; 
<b>Command</b>: UPDATE | <b>SQL command</b> used to edit rows in a table. | UPDATE table_nameSET some_column = some_valueWHERE some_column = some_value; 
<b>Command</b>: WHERE | <b>SQL command</b> used as a clause used to filter the result set to include the rows where the condition is true. | SELECT column_name(s)FROM table_nameWHERE column_name operator value; 
<b>Command</b>: WITH | <b>SQL command</b> used to store the result of a particular query in a temporary table using an alias. | WITH temporary_name AS (SELECT *FROM table_name)SELECT *FROM temporary_nameWHERE column_name operator value; 