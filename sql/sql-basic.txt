<b>Command</b>: SELECT | <b>SQL command</b> used to is probably the most commonly-used SQL statement. You'll use it pretty much every time you query data with SQL. It allows you to define what data you want your query to return.. | SELECT name<br />FROM customers; 
<b>Command</b>: SELECT * | <b>SQL command</b> used tosed with an asterisk (*) will return all of the columns in the table we're querying.. | SELECT * FROM customers; 
<b>Command</b>: SELECT DISTINCT | <b>SQL command</b> used to only returns data that is distinct — in other words, if there are duplicate records, it will return only one copy of each.. | SELECT DISTINCT name<br />FROM customers; 
<b>Command</b>: SELECT INTO | <b>SQL command</b> used to copies the specified data from one table into another.. | SELECT * INTO customers<br />FROM customers_backup; 
<b>Command</b>: SELECT TOP | <b>SQL command</b> used to only returns the top x number or percent from a table.. | SELECT TOP 50 * FROM customers; 
<b>Command</b>: AS | <b>SQL command</b> used to renames a column or table with an alias that we can choose. For example, in the code below, we’re renaming the name column as first_name:. | SELECT name AS first_name<br />FROM customers; 
<b>Command</b>: FROM | <b>SQL command</b> used to specifies the table we're pulling our data from:. | SELECT name<br />FROM customers; 
<b>Command</b>: WHERE | <b>SQL command</b> used to filters your query to only return results that match a set condition. We can use this together with conditional operators like =, >, <, >=, <=, etc.. | SELECT name<br />FROM customers<br />WHERE name = ‘Bob’; 
<b>Command</b>: AND | <b>SQL command</b> used to combines two or more conditions in a single query. All of the conditions must be met for the result to be returned.. | SELECT name<br />FROM customers<br />WHERE name = ‘Bob’ AND age = 55; 
<b>Command</b>: OR | <b>SQL command</b> used to combines two or more conditions in a single query. Only one of the conditions must be met for a result to be returned.. | SELECT name<br />FROM customers<br />WHERE name = ‘Bob’ OR age = 55; 
<b>Command</b>: BETWEEN | <b>SQL command</b> used to filters your query to return only results that fit a specified range.. | SELECT name<br />FROM customers<br />WHERE age BETWEEN 45 AND 55; 
<b>Command</b>: LIKE | <b>SQL command</b> used to searches for a specified pattern in a column. In the example code below, any row with a name that included the characters Bob would be returned.. | SELECT name<br />FROM customers<br />WHERE name LIKE ‘%Bob%’; 
<b>Command</b>: IN | <b>SQL command</b> used to allows us to specify multiple values we want to select for when using the WHERE command.. | SELECT name<br />FROM customers<br />WHERE name IN (‘Bob’, ‘Fred’, ‘Harry’); 
<b>Command</b>: IS NULL | <b>SQL command</b> used to will return only rows with a NULL value.. | SELECT name<br />FROM customers<br />WHERE name IS NULL; 
<b>Command</b>: IS NOT NULL | <b>SQL command</b> used to does the opposite — it will return only rows without a NULL value.. | SELECT name<br />FROM customers<br />WHERE name IS NOT NULL; 
<b>Command</b>: CREATE | <b>SQL command</b> used to can be used to set up a database, table, index or view.. | CREATE DATABASE dataquestDB; 
<b>Command</b>: CREATE DATABASE | <b>SQL command</b> used to creates a new database, assuming the user running the command has the correct admin rights.. | CREATE DATABASE dataquestDB; 
<b>Command</b>: CREATE TABLE | <b>SQL command</b> used to creates a new table inside a database. The terms int and varchar(255) in this example specify the datatypes of the columns we're creating.. | CREATE TABLE customers (<br />    customer_id int,<br />    name varchar(255),<br />    age int<br />); 
<b>Command</b>: CREATE INDEX | <b>SQL command</b> used to generates an index for a table. Indexes are used to retrieve data from a database faster.. | CREATE INDEX idx_name<br />ON customers (name); 
<b>Command</b>: CREATE VIEW | <b>SQL command</b> used to creates a virtual table based on the result set of an SQL statement. A view is like a regular table (and can be queried like one), but it is not saved as a permanent table in the database.. | CREATE VIEW [Bob Customers] AS<br />SELECT name, age<br />FROM customers<br />WHERE name = ‘Bob’; 
<b>Command</b>: DROP | <b>SQL command</b> used to statements can be used to delete entire databases, tables or indexes.. | DROP DATABASE dataquestDB; 
<b>Command</b>: DROP DATABASE | <b>SQL command</b> used to deletes the entire database including all of its tables, indexes etc as well as all the data within it.. | DROP DATABASE dataquestDB; 
<b>Command</b>: DROP TABLE | <b>SQL command</b> used to deletes a table as well as the data within it.. | DROP TABLE customers; 
<b>Command</b>: DROP INDEX | <b>SQL command</b> used to deletes an index within a database.. | DROP INDEX idx_name; 
<b>Command</b>: UPDATE | <b>SQL command</b> used toDATE statement is used to update data in a table. For example, the code below would update the age of any customer named Bob in the customers table to 56.. | UPDATE customers<br />SET age = 56<br />WHERE name = ‘Bob’; 
<b>Command</b>: DELETE | <b>SQL command</b> used to can remove all rows from a table (using ), or can be used as part of a WHERE clause to delete rows that meet a specific condition.. | DELETE FROM customers<br />WHERE name = ‘Bob’; 
<b>Command</b>: ALTER TABLE | <b>SQL command</b> used to allows you to add or remove columns from a table. In the code snippets below, we’ll add and then remove a column for surname. The text varchar(255) specifies the datatype of the column.. | ALTER TABLE customers<br />ADD surname varchar(255); 
<b>Command</b>: AGGREGATE FUNCTIONS (COUNT/SUM/AVG/MIN/MAX) | <b>SQL command</b> used ton on a set of values and returns a single result.. | SELECT COUNT(*)<br />FROM customers; 
<b>Command</b>: COUNT | <b>SQL command</b> used to returns the number of rows that match the specified criteria. In the code below, we’re using *, so the total row count for customers would be returned.. | SELECT COUNT(*)<br />FROM customers; 
<b>Command</b>: SUM | <b>SQL command</b> used to returns the total sum of a numeric column.. | SELECT SUM(age)<br />FROM customers; 
<b>Command</b>: AVG | <b>SQL command</b> used to returns the average value of a numeric column.. | SELECT AVG(age)<br />FROM customers; 
<b>Command</b>: MIN | <b>SQL command</b> used to returns the minimum value of a numeric column.. | SELECT MIN(age)<br />FROM customers; 
<b>Command</b>: MAX | <b>SQL command</b> used to returns the maximum value of a numeric column.. | SELECT MAX(age)<br />FROM customers; 
<b>Command</b>: GROUP BY | <b>SQL command</b> used toP BY statement groups rows with the same values into summary rows. The statement is often used with aggregate functions. For example, the code below will display the average age for each name that appears in our customers table.. | SELECT name, AVG(age)<br />FROM customers<br />GROUP BY name; 
<b>Command</b>: HAVING | <b>SQL command</b> used to performs the same action as the WHERE clause. The difference is that HAVING is used for aggregate functions, whereas WHERE doesn’t work with them.. | SELECT COUNT(customer_id), name<br />FROM customers<br />GROUP BY name<br />HAVING COUNT(customer_id) > 2; 
<b>Command</b>: ORDER BY | <b>SQL command</b> used to sets the order of the returned results. The order will be ascending by default.. | SELECT name<br />FROM customers<br />ORDER BY age; 
<b>Command</b>: DESC | <b>SQL command</b> used to will return the results in descending order.. | SELECT name<br />FROM customers<br />ORDER BY age DESC; 
<b>Command</b>: OFFSET | <b>SQL command</b> used toFSET statement works with ORDER BY and specifies the number of rows to skip before starting to return rows from the query.. | SELECT name<br />FROM customers<br />ORDER BY age<br />OFFSET 10 ROWS; 
<b>Command</b>: FETCH | <b>SQL command</b> used to specifies the number of rows to return after the OFFSET clause has been processed. The OFFSET clause is mandatory, while the FETCH clause is optional.. | SELECT name<br />FROM customers<br />ORDER BY age<br />OFFSET 10 ROWS<br />FETCH NEXT 10 ROWS ONLY; 
<b>Command</b>: JOINS (INNER, LEFT, RIGHT, FULL) | <b>SQL command</b> used to rows from two or more tables. The four types of JOIN are INNER, LEFT, RIGHT and FULL.. | SELECT name<br />FROM customers<br />INNER JOIN orders<br />ON customers.customer_id = orders.customer_id; 
<b>Command</b>: INNER JOIN | <b>SQL command</b> used to selects records that have matching values in both tables.. | SELECT name<br />FROM customers<br />INNER JOIN orders<br />ON customers.customer_id = orders.customer_id; 
<b>Command</b>: LEFT JOIN | <b>SQL command</b> used to selects records from the left table that match records in the right table. In the below example the left table is customers.. | SELECT name<br />FROM customers<br />LEFT JOIN orders<br />ON customers.customer_id = orders.customer_id; 
<b>Command</b>: RIGHT JOIN | <b>SQL command</b> used to selects records from the right table that match records in the left table. In the below example the right table is orders.. | SELECT name<br />FROM customers<br />RIGHT JOIN orders<br />ON customers.customer_id = orders.customer_id; 
<b>Command</b>: FULL JOIN | <b>SQL command</b> used to selects records that have a match in the left or right table. Think of it as the “OR” JOIN compared with the “AND” JOIN (INNER JOIN).. | SELECT name<br />FROM customers<br />FULL OUTER JOIN orders<br />ON customers.customer_id = orders.customer_id; 
<b>Command</b>: EXISTS | <b>SQL command</b> used to is used to test for the existence of any record in a subquery.. | SELECT name<br />FROM customers<br />WHERE EXISTS<br />(SELECT order FROM ORDERS WHERE customer_id = 1); 
<b>Command</b>: GRANT | <b>SQL command</b> used to gives a particular user access to database objects such as tables, views or the database itself. The below example would give SELECT and UPDATE access on the customers table to a user named “usr_bob”.. | GRANT SELECT, UPDATE ON customers TO usr_bob; 
<b>Command</b>: REVOKE | <b>SQL command</b> used to removes a user's permissions for a particular database object.. | REVOKE SELECT, UPDATE ON customers FROM usr_bob; 
<b>Command</b>: SAVEPOINT | <b>SQL command</b> used to allows you to identify a point in a transaction to which you can later roll back. Similar to creating a backup.. | SAVEPOINT SAVEPOINT_NAME; 
<b>Command</b>: COMMIT | <b>SQL command</b> used to is for saving every transaction to the database. A COMMIT statement will release any existing savepoints that may be in use and once the statement is issued, you cannot roll back the transaction.. | DELETE FROM customers<br />WHERE name = ‘Bob’;<br />COMMIT 
<b>Command</b>: ROLLBACK | <b>SQL command</b> used to is used to undo transactions which are not saved to the database. This can only be used to undo transactions since the last COMMIT or ROLLBACK command was issued. You can also rollback to a SAVEPOINT that has been created before.. | ROLLBACK TO SAVEPOINT_NAME; 
<b>Command</b>: TRUNCATE | <b>SQL command</b> used to TABLE removes all data entries from a table in a database, but keeps the table and structure in place. Similar to DELETE.. | TRUNCATE TABLE customers; 
<b>Command</b>: UNION | <b>SQL command</b> used to combines multiple result-sets using two or more SELECT statements and eliminates duplicate rows.. | SELECT name FROM customers<br />UNION<br />SELECT name FROM orders; 
<b>Command</b>: UNION ALL | <b>SQL command</b> used to combines multiple result-sets using two or more SELECT statements and keeps duplicate rows.. | SELECT name FROM customers<br />UNION<br />SELECT name FROM orders; 
